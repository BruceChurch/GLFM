aa<-hclust(as.dist(Dist.mat.ham),method = "complete")
plot(aa)
aa<-hclust(as.dist(Dist.mat.cal),method = "complete")
plot(aa)
aa<-hclust(as.dist(Dist.mat.cal),method = "single")
plot(aa)
aa<-hclust(as.dist(Dist.mat.ken),method = "single")
plot(aa)
aa<-hclust(as.dist(Dist.mat.ken),method = "average")
plot(aa)
help("mallow")
help("mallow")
??mallowâ€™
??mallow
n<-3
lamb<-0.1
# Creates a matrix with all possible permutations of n, size n! x n
S<-permutations.of(n, alert = TRUE)
Dist.mat.ken<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.cal<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.ul<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.ham<--matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.mall<-matrix(rep(0,36),ncol=6,nrow=6)
# Compute different distance matrices
for(ii in 1:6){
for(jj in 1:6){
Dist.mat.ken[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "kendall")
Dist.mat.cal[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "Cayley")
Dist.mat.ul[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "ulam")
Dist.mat.ham[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "hamming")
Dist.mat.mall[ii,jj]<-2*(1-exp(-lamb*Dist.mat.ken[ii,jj]))
}
}
Dist.mat.mall
aa<-hclust(as.dist(Dist.mat.mall),method = "complete")
plot(aa)
aa<-hclust(as.dist(Dist.mat.mall),method = "single")
plot(aa)
aa<-hclust(as.dist(Dist.mat.mall),method = "average")
plot(aa)
aa<-hclust(as.dist(Dist.mat.mall),method = "complete")
plot(aa)
setwd("~/Documents/Working_papers_2016/SnKernels/R_code_Jiao")
rm(list = ls())
getwd
getwd()
setwd("~/Documents/Working_papers_2016/SnKernels/R_code_Jiao")
cd Documents
require(installR)
install.packages("installR")
Rcpp.hpp
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
require(RcppGSL)
install.packages("RcppGSL")
install.packages("RcppGSL")
require(RcppGSL)
install.packages('gsl',type = 'source')
install.packages('gsl',type = 'source')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
library("RGLFM")
rcpp_hello_world() # Try the C++ function generated in the template
compileAttributes("~/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM",verbose=TRUE)
install.packages("~/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM", repos = NULL, type="source")
library(Rcpp)
sessionInfo()
library(RcppGSL)
sessionInfo()
varargin<-c()
varargin_size<-length(varargin)
switch(varargin_size,0={'Do something here'},
1={'something else'})
switch(varargin_size, 0 ={'Do something here'},
1 = {'something else'})
switch(varargin_size, 0 ={'Do something here'},1 = {'something else'})
switch(varargin_size, 0 {'Do something here'},1  {'something else'})
switch(varargin_size, 0 'Do something here',1  'something else')
switch(varargin_size, varargin_size=0 {'Do something here'},varargin_size=1  {'something else'})
rnorm(3)
rnorm(4)
help(dnorm)
pi
params<-list("NumS"=100,"bu"=1)
(params$NumS %in% params )
(params$NumS %in% params )==FALSE
2:4
setwd("~/Documents/Working_papers/FAP_Rpackage/GLFM/src/GLFMR")
X<-matrix(rnorm(10,0,1),nrow=10,ncol=5)
C=c('g','g','g','g','g')
m0<-matrix(0,10,2)
> Z <- apply(m0, c(1,2), function(x) sample(c(0,1),1,prob=c(0.8,0.2)))
Z <- apply(m0, c(1,2), function(x) sample(c(0,1),1,prob=c(0.8,0.2)))
source("GLFM_complete.R")
source("GLFM_computeMAP.R")
source("GLFM_computePDF.R")
source("GLFM_computePDF.R")
source("init_default_params.R")
source("GLFM_infer.R")
output<-GLFM_infer(data,c())
data<-list("X"=X,"C"=C)
output<-GLFM_infer(data,c())
source("GLFM_infer.R")
source("GLFM_computeMAP.R")
output<-GLFM_infer(data,c())
Kest<-dim(output$hidden$B)[1]
Kest
Zp <-diag(Kest)
X_map <- GLFM_computeMAP(data$C, Zp, output$hidden, output$params,c())
X_map
X
source("GLFM_complete.R")
X[1,5]<-NaN
X[10,5]<-NaN
data<-list("X"=X,"C"=C)
output2<-GLFM_complete(data,c())
output2<-GLFM_complete(data,c())
source("GLFM_complete.R")
output2<-GLFM_complete(data,c())
sum(is.nan(data$X)
)
X[1,5]<-NaN
X[10,5]<-NaN
data<-list("X"=X,"C"=C)
output2<-GLFM_complete(data,c())
source("GLFM_complete.R")
X[1,5]<-NaN
X[10,5]<-NaN
data<-list("X"=X,"C"=C)
output2<-GLFM_complete(data,c())
source("GLFM_complete.R")
X
data
output2<-GLFM_complete(data,c())
source("GLFM_complete.R")
output2<-GLFM_complete(data,c())
sum(data$X == params$missing)
sum(data$X == -1)
sum(data$X == -1)>0
(data$X == -1)
sum(data$X == -1)=NA
sum(data$X == -1)
is.na(sum(data$X == -1))
source("GLFM_complete.R")
output2<-GLFM_complete(data,c())
Z
length(Z)
setwd("~/Documents/Working_papers/FAP_Rpackage/GLFM/src/GLFMR")
source("GLFM_infer.R")
source("GLFM_complete.R")
output2<-GLFM_complete(data,c())
source("GLFM_complete.R")
output2<-GLFM_complete(data,c())
setwd("~/Documents/Working_papers/FAP_Rpackage/GLFM/src/GLFMR")
output2<-GLFM_complete(data,c())
setwd("~/Documents/Working_papers/FAP_Rpackage/GLFM/src/GLFMR")
source("GLFM_complete.R")
output2<-GLFM_complete(data,c())
X
dim(X)
dim(X)[2]
X <- matrix(rnorm(10,0,1),nrow=10,ncol=5)
C <- c('g','g','g','g','g')
m0 <- matrix(0,10,2)
Z <- apply(m0, c(1,2), function(x) sample(c(0,1),1,prob=c(0.8,0.2)))
data<-list("X"=X,"C"=C)
# GLFM_infer, c() es para un vector vacio:
output<-GLFM_infer(data,c())
# GLFM_computeMAP
Kest<-dim(output$hidden$B)[1]
Zp <-diag(Kest)
for(dd in 1:D){
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,dd)
print(pdf_val)
readline("Press return to continue")
}
X <- matrix(rnorm(10,0,1),nrow=10,ncol=5)
C <- c('g','g','g','g','g')
m0 <- matrix(0,10,2)
Z <- apply(m0, c(1,2), function(x) sample(c(0,1),1,prob=c(0.8,0.2)))
data<-list("X"=X,"C"=C)
# GLFM_infer, c() es para un vector vacio:
output<-GLFM_infer(data,c())
# GLFM_computeMAP
Kest<-dim(output$hidden$B)[1]
Zp <-diag(Kest)
D
D<-dim(X)[2]
D
X
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("pdf_g.R")
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
hidden
output
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("GLFM_computePDF.R")
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
rm(list=ls())
source("GLFM_infer.R")
source("GLFM_computeMAP.R")
source("GLFM_complete.R")
source("GLFM_computePDF.R")
X <- matrix(rnorm(10,0,1),nrow=10,ncol=5)
C <- c('g','g','g','g','g')
m0 <- matrix(0,10,2)
Z <- apply(m0, c(1,2), function(x) sample(c(0,1),1,prob=c(0.8,0.2)))
data<-list("X"=X,"C"=C)
# GLFM_infer, c() es para un vector vacio:
output<-GLFM_infer(data,c())
# GLFM_computeMAP
Kest<-dim(output$hidden$B)[1]
Zp <-diag(Kest)
X_map <- GLFM_computeMAP(data$C, Zp, output$hidden, output$params,c())
#GLFM_computePDF
D<-dim(X)[2]
D
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
rm(list=ls())
source("GLFM_infer.R")
source("GLFM_computeMAP.R")
source("GLFM_complete.R")
source("GLFM_computePDF.R")
X <- matrix(rnorm(10,0,1),nrow=10,ncol=5)
C <- c('g','g','g','g','g')
m0 <- matrix(0,10,2)
Z <- apply(m0, c(1,2), function(x) sample(c(0,1),1,prob=c(0.8,0.2)))
data<-list("X"=X,"C"=C)
# GLFM_infer, c() es para un vector vacio:
output<-GLFM_infer(data,c())
Kest<-dim(output$hidden$B)[1]
Zp <-diag(Kest)
Kest
dim(output$hidden$B)[1]
output
m(list=ls())
source("GLFM_infer.R")
source("GLFM_computeMAP.R")
source("GLFM_complete.R")
source("GLFM_computePDF.R")
X <- matrix(rnorm(10,0,1),nrow=10,ncol=5)
C <- c('g','g','g','g','g')
m0 <- matrix(0,10,2)
Z <- apply(m0, c(1,2), function(x) sample(c(0,1),1,prob=c(0.8,0.2)))
data<-list("X"=X,"C"=C)
output<-GLFM_infer(data,c())
output
rm(list=ls())
source("GLFM_infer.R")
source("GLFM_computeMAP.R")
source("GLFM_complete.R")
source("GLFM_computePDF.R")
X <- matrix(rnorm(10,0,1),nrow=10,ncol=5)
C <- c('g','g','g','g','g')
m0 <- matrix(0,10,2)
Z <- apply(m0, c(1,2), function(x) sample(c(0,1),1,prob=c(0.8,0.2)))
X
C
data<-list("X"=X,"C"=C)
output<-GLFM_infer(data,c())
output
data
output<-GLFM_infer(data,c())
source("GLFM_infer.R")
output<-GLFM_infer(data,c())
source("GLFM_infer.R")
output<-GLFM_infer(data,c())
source("GLFM_infer.R")
output<-GLFM_infer(data,c())
source("GLFM_infer.R")
setwd("~/Documents/Working_papers/FAP_Rpackage/GLFM/src/GLFMR")
output<-GLFM_infer(data,c())
source("GLFM_infer.R")
setwd("~/Documents/Working_papers/FAP_Rpackage/GLFM/src/GLFMR")
source("GLFM_infer.R")
source("GLFM_infer.R")
output<-GLFM_infer(data,c())
output
Kest<-dim(output$hidden$B)[1]
Zp <-diag(Kest)
Kest
D<-dim(X)[2]
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
help(pnorm)
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("pdf_g.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("pdf_g.R")
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
help(seq)
seq(0, 1, length.out = 11)
seq(0, 1, length = 11)
rm(list=ls())
rm(list=ls())
source("GLFM_infer.R")
source("GLFM_computeMAP.R")
source("GLFM_complete.R")
source("GLFM_computePDF.R")
X <- matrix(rnorm(10,0,1),nrow=10,ncol=5)
C <- c('g','g','g','g','g')
m0 <- matrix(0,10,2)
Z <- apply(m0, c(1,2), function(x) sample(c(0,1),1,prob=c(0.8,0.2)))
data<-list("X"=X,"C"=C)
# GLFM_infer, c() es para un vector vacio:
output<-GLFM_infer(data,c())
# GLFM_computeMAP
Kest<-dim(output$hidden$B)[1]
Zp <-diag(Kest)
X_map <- GLFM_computeMAP(data$C, Zp, output$hidden, output$params,c())
#GLFM_computePDF
D<-dim(X)[2]
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
help(pnorm)
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("pdf_g.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("pdf_g.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("pdf_g.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("pdf_g.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("pdf_g.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("pdf_g.R")
source("GLFM_complete.R")
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("pdf_g.R")
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("pdf_g.R")
source("GLFM_computePDF.R")
source("pdf_g.R")
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("pdf_g.R")
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
pdf_val
source("GLFM_computePDF.R")
source("pdf_g.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
pdf
pdf_val
source("GLFM_computePDF.R")
source("pdf_g.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
source("pdf_g.R")
source("GLFM_computePDF.R")
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
pdf_val
for(dd in 1:D){
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,dd)
print(pdf_val)
readline("Press return to continue")
}
source("GLFM_computePDF.R")
for(dd in 1:D){
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,dd)
print(pdf_val)
readline("Press return to continue")
}
source("GLFM_computePDF.R")
for(dd in 1:D){
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,dd)
print(pdf_val)
readline("Press return to continue")
}
ffu<-NULL
ffu
length(ffu)
Zp
Zp[,-1]
list(Zp)
leg <-as.character(Zp)
leg
length(leg)
paste(leg[1:3],sep="")
help(paste)
paste(leg[1:3],sep=" " ")
paste(leg[1:3])
paste(leg[1:3],collapse=" ")
for(jj in 1:n_leg){
print(paste(as.character(Zp[jj,]),collapse =" "))
}
n_leg<- dim(Zp)[1]
for(jj in 1:n_leg){
print(paste(as.character(Zp[jj,]),collapse =" "))
}
legends<-list()
for(jj in 1:n_leg){
print(paste(as.character(Zp[jj,]),collapse =" "))
legends<-c(paste(as.character(Zp[jj,]),collapse =" "), legends)
}
legends
X
hist(X[,1],)
hist(X[,1],100)
help(hist)
counts <- table(data$X[,dd])
counts
barplot(counts)
barplot(data$X[,dd])
hh<-hist(X[,1],100)
barplot(hh,counts)
barplot(counts,hh)
barplot(counts)
help(barplot)
help(union)
rm(list=ls())
source("GLFM_infer.R")
source("GLFM_computeMAP.R")
source("GLFM_complete.R")
source("GLFM_computePDF.R")
X <- matrix(rnorm(10,0,1),nrow=10,ncol=5)
C <- c('g','g','g','g','g')
m0 <- matrix(0,10,2)
Z <- apply(m0, c(1,2), function(x) sample(c(0,1),1,prob=c(0.8,0.2)))
data<-list("X"=X,"C"=C)
# GLFM_infer, c() es para un vector vacio,
# te devuelve una lista de listas: output$hidden y output$params
output<-GLFM_infer(data,c())
# GLFM_computeMAP
# Te devuelve la matrix X_map
Kest<-dim(output$hidden$B)[1]
Zp <-diag(Kest)
X_map <- GLFM_computeMAP(data$C, Zp, output$hidden, output$params,c())
#GLFM_computePDF, te devuelve una lista con pdf y xd
D<-dim(X)[2]
for(dd in 1:D){
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,dd)
pdf_val<-GLFM_computePDF(data,Zp,output$hidden,output$params,1)
+
pdf_val
pdf_val
plot(pdf_val$xd)
plot(pdf_val$xd,pdf_val$pdf)
plot(,pdf_val$pdf)
