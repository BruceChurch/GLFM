S
S<-matrix(c(s1,s2,s3,s4,s5,s6),ncol=3,nrow=6)
S
s[1]<-c(1,2,3)
s<-matrix(rep(0,12),ncol=2,nrow=6)
s
s<-matrix(rep(0,12),ncol=3,nrow=6)
s
S<-matrix(rep(0,12),ncol=3,nrow=6)
S[1,:]<-c(1,2,3)
S<-matrix(rep(0,12),ncol=3,nrow=6)
S[1,]<-c(1,2,3)
S
help(for)
help("for")
S<-matrix(rep(0,36),ncol=6,nrow=6)
D
Dist.mat<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat
require(PerMallows)
S<-matrix(rep(0,12),ncol=3,nrow=6)
S[1,]<-c(1,2,3)
S[2,]<-c(1,3,2)
S[3,]<-c(3,2,1)
S[4,]<-c(3,1,2)
S[5,]<-c(2,3,1)
S[6,]<-c(2,1,3)
Dist.mat<-matrix(rep(0,36),ncol=6,nrow=6)
for(ii in 1:6){
for(jj in 1:6){
Dist.mat(ii,jj)<-distance(S[ii,],S[jj,], dist.name = "kendall")
}
}
require(PerMallows)
Dist.mat[1,1]
S<-matrix(rep(0,12),ncol=3,nrow=6)
S[1,]<-c(1,2,3)
S[2,]<-c(1,3,2)
S[3,]<-c(3,2,1)
S[4,]<-c(3,1,2)
S[5,]<-c(2,3,1)
S[6,]<-c(2,1,3)
Dist.mat<-matrix(rep(0,36),ncol=6,nrow=6)
for(ii in 1:6){
for(jj in 1:6){
Dist.mat(ii,jj)<-distance(S[ii,],S[jj,], dist.name = "kendall")
}
}
Dist.mat[1,1]
require(PerMallows)
S<-matrix(rep(0,12),ncol=3,nrow=6)
S[1,]<-c(1,2,3)
S[2,]<-c(1,3,2)
S[3,]<-c(3,2,1)
S[4,]<-c(3,1,2)
S[5,]<-c(2,3,1)
S[6,]<-c(2,1,3)
Dist.mat<-matrix(rep(0,36),ncol=6,nrow=6)
for(ii in 1:6){
for(jj in 1:6){
Dist.mat[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "kendall")
}
}
Dist.mat
help("eigen")
eigen(Dist.mat)
S<-matrix(rep(0,12),ncol=3,nrow=6)
S[1,]<-c(1,2,3)
S[2,]<-c(1,3,2)
S[3,]<-c(3,2,1)
S[4,]<-c(3,1,2)
S[5,]<-c(2,3,1)
S[6,]<-c(2,1,3)
Dist.mat.ken<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.cal<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.ul<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.hamming<--matrix(rep(0,36),ncol=6,nrow=6)
for(ii in 1:6){
for(jj in 1:6){
Dist.mat.ken[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "kendall")
Dist.mat.cal[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "caley")
Dist.mat.ul[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "ulam")
Dist.mat.ham[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "hamming")
}
}
S<-matrix(rep(0,12),ncol=3,nrow=6)
S[1,]<-c(1,2,3)
S[2,]<-c(1,3,2)
S[3,]<-c(3,2,1)
S[4,]<-c(3,1,2)
S[5,]<-c(2,3,1)
S[6,]<-c(2,1,3)
Dist.mat.ken<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.cal<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.ul<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.hamming<--matrix(rep(0,36),ncol=6,nrow=6)
for(ii in 1:6){
for(jj in 1:6){
Dist.mat.ken[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "kendall")
Dist.mat.cal[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "Cayley")
Dist.mat.ul[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "ulam")
Dist.mat.ham[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "hamming")
}
}
S<-matrix(rep(0,12),ncol=3,nrow=6)
S[1,]<-c(1,2,3)
S[2,]<-c(1,3,2)
S[3,]<-c(3,2,1)
S[4,]<-c(3,1,2)
S[5,]<-c(2,3,1)
S[6,]<-c(2,1,3)
Dist.mat.ken<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.cal<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.ul<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.hamming<--matrix(rep(0,36),ncol=6,nrow=6)
for(ii in 1:6){
for(jj in 1:6){
Dist.mat.ken[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "kendall")
Dist.mat.cal[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "Cayley")
Dist.mat.ul[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "ulam")
Dist.mat.ham[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "hamming")
}
}
S<-matrix(rep(0,12),ncol=3,nrow=6)
S[1,]<-c(1,2,3)
S[2,]<-c(1,3,2)
S[3,]<-c(3,2,1)
S[4,]<-c(3,1,2)
S[5,]<-c(2,3,1)
S[6,]<-c(2,1,3)
Dist.mat.ken<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.cal<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.ul<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.ham<--matrix(rep(0,36),ncol=6,nrow=6)
for(ii in 1:6){
for(jj in 1:6){
Dist.mat.ken[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "kendall")
Dist.mat.cal[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "Cayley")
Dist.mat.ul[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "ulam")
Dist.mat.ham[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "hamming")
}
}
Dist.mat.ham
Dist.mat.ul
Dist.mat.ken
Dist.mat.cal
eigen(Dist.mat.ham)$values
eigen(Dist.mat.ul)$values
eigen(Dist.mat.cal)$values
eigen(Dist.mat.ken)$values
eigen(Dist.mat.ken,symmetric=TRUE)$values
help("cor")
cor(S[1,],S[2,],method="spearman")
cor(S[1,],S[3,],method="spearman")
install.packages("StatMethRank")
bu<-generate.perms(3, k = 3, vec = 1:3)
require(StatMethRank)
bu<-generate.perms(3, k = 3, vec = 1:3)
help("generate.perms")
generate.perms(10, 6)
help("generate")
help("generate.perm")
help("generate.comb")
permutations.of(3, alert = TRUE)
n<-3
S<-permutations.of(n, alert = TRUE)
perm2cycles(c(1,5,2,3,4)
)
n<-3
S<-permutations.of(n, alert = TRUE)
Dist.mat.ken<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.cal<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.ul<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.ham<--matrix(rep(0,36),ncol=6,nrow=6)
for(ii in 1:6){
for(jj in 1:6){
Dist.mat.ken[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "kendall")
Dist.mat.cal[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "Cayley")
Dist.mat.ul[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "ulam")
Dist.mat.ham[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "hamming")
}
}
hclust(Dist.mat.ken)
Dist.mat.ken
hclust(is.dist(Dist.mat.ken)
)
hclust(is.dist(Dist.mat.ken,method = "complete")
)
hclust(is.dist(Dist.mat.ken),method = "complete")
aa<-hclust(is.dist(Dist.mat.ken),method = "complete")
aa<-hclust(Dist.mat.ken,method = "complete")
help("dist")
aa<-hclust(as.dist(Dist.mat.ken),method = "complete")
aa<-hclust(as.dist(Dist.mat.ken),method = "complete")
plot(aa)
aa<-hclust(as.dist(Dist.mat.cal),method = "complete")
aa<-hclust(as.dist(Dist.mat.ken),method = "complete")
aa<-hclust(as.dist(Dist.mat.ham),method = "complete")
plot(aa)
aa<-hclust(as.dist(Dist.mat.cal),method = "complete")
plot(aa)
aa<-hclust(as.dist(Dist.mat.cal),method = "single")
plot(aa)
aa<-hclust(as.dist(Dist.mat.ken),method = "single")
plot(aa)
aa<-hclust(as.dist(Dist.mat.ken),method = "average")
plot(aa)
help("mallow")
help("mallow")
??mallowâ€™
??mallow
n<-3
lamb<-0.1
# Creates a matrix with all possible permutations of n, size n! x n
S<-permutations.of(n, alert = TRUE)
Dist.mat.ken<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.cal<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.ul<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.ham<--matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.mall<-matrix(rep(0,36),ncol=6,nrow=6)
# Compute different distance matrices
for(ii in 1:6){
for(jj in 1:6){
Dist.mat.ken[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "kendall")
Dist.mat.cal[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "Cayley")
Dist.mat.ul[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "ulam")
Dist.mat.ham[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "hamming")
Dist.mat.mall[ii,jj]<-2*(1-exp(-lamb*Dist.mat.ken[ii,jj]))
}
}
Dist.mat.mall
aa<-hclust(as.dist(Dist.mat.mall),method = "complete")
plot(aa)
aa<-hclust(as.dist(Dist.mat.mall),method = "single")
plot(aa)
aa<-hclust(as.dist(Dist.mat.mall),method = "average")
plot(aa)
aa<-hclust(as.dist(Dist.mat.mall),method = "complete")
plot(aa)
setwd("~/Documents/Working_papers_2016/SnKernels/R_code_Jiao")
rm(list = ls())
getwd
getwd()
setwd("~/Documents/Working_papers_2016/SnKernels/R_code_Jiao")
cd Documents
require(installR)
install.packages("installR")
Rcpp.hpp
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
require(RcppGSL)
install.packages("RcppGSL")
install.packages("RcppGSL")
require(RcppGSL)
install.packages('gsl',type = 'source')
install.packages('gsl',type = 'source')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
library("RGLFM")
rcpp_hello_world() # Try the C++ function generated in the template
compileAttributes("~/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM",verbose=TRUE)
install.packages("~/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM", repos = NULL, type="source")
library(Rcpp)
sessionInfo()
library(RcppGSL)
sessionInfo()
varargin<-c()
varargin_size<-length(varargin)
switch(varargin_size,0={'Do something here'},
1={'something else'})
switch(varargin_size, 0 ={'Do something here'},
1 = {'something else'})
switch(varargin_size, 0 ={'Do something here'},1 = {'something else'})
switch(varargin_size, 0 {'Do something here'},1  {'something else'})
switch(varargin_size, 0 'Do something here',1  'something else')
switch(varargin_size, varargin_size=0 {'Do something here'},varargin_size=1  {'something else'})
rnorm(3)
rnorm(4)
help(dnorm)
pi
params<-list("NumS"=100,"bu"=1)
(params$NumS %in% params )
(params$NumS %in% params )==FALSE
2:4
sss<-matrix(1,nrow=3,ncol=2)
sss
sss[1,2]<-10
sss[2,3]<-3
sss[3,2]<-3
sss
unique(ss)
unique(sss)
unique(as.matrix(sss))
sapply(unique,sss)
sapply(sss,unique)
unique(c(1,1,1,2,2,3))
sapply(sss,function(x){unique(sss[x,])})
unique(sss[1,])
unique(sss[2,])
unique(sss[3,])
sss<-c(sss,c(1,1,1))
sss
sapply(unique,sss)
sapply(sss,unique)
sss
sss<-matrix(1,nrow=3,ncol=2)
sss[2,3]<-3
sss[1,2]<-10
sss[3,2]<-3
sss
sss<-c(sss;c(1,1))
sss<-c(sss,c(1,1))
sss
sss<-matrix(1,nrow=3,ncol=2)
sss[1,2]<-10
sss[3,2]<-3
sss
cbind(sss,c(1,1))
cbind(sss,c(1,1,1))
rbind(sss,c(1,1))
sapply(sss,unique)
a<-c(1 2 3)
a<-c(1, 2, 3)
b<-c(1,,4,5)
b<-c(1,4,5)
a==b
help(isany)
help(is.any)
all.equal(a,b)
identical(a,b)
identical(a,sss)
N<-5
m0<-matrix(0,N,2)
Z <- apply(m0, c(1,2), function(x) sample(c(0,1),1,prob=c(0.2,0.8)))
Z
patterns<-sapply(Z,unique)
patterns
patterns<-sapply(t(Z),unique)
patterns
duplicated(Z)
Z[duplicated(Z),]
Z[!duplicated(Z),]
patterns<-Z[!duplicated(Z),]
which(Z==patterns[1,])
patterns
patterns[1,]
Z
identical(Z,patterns[1,])
sapply(Z,function(x){Z[x,]==patterns[1,]})
which(apply(Z, 1, function(x) all.equal(x[1:2], patterns[1,])) == "TRUE")
which(apply(Z, 1, function(x) all.equal(x[1:2], patterns[2,])) == "TRUE")
patterns
which(apply(Z, 1, function(x) all.equal(x, patterns[2,])) == "TRUE")
which(apply(Z, 1, function(x) all.equal(x, patterns[3,])) == "TRUE")
which(apply(Z, 1, function(x) all.equal(x, patterns[4,])) == "TRUE")
patterns
L <- rep(0,dim(patterns)[1])
for(r in 1:dim(patterns)[1] ){
idxs_eq<-which(apply(Z, 1, function(x) all.equal(x , patterns[r,])) == "TRUE")
C[idxs_eq]<-'r'
L[r]<-length(idx_eq)
}
L <- rep(0,dim(patterns)[1])
for(r in 1:dim(patterns)[1] ){
idxs_eq<-which(apply(Z, 1, function(x) all.equal(x , patterns[r,])) == "TRUE")
#C[idxs_eq]<-'r'
L[r]<-length(idx_eq)
}
L <- rep(0,dim(patterns)[1])
for(r in 1:dim(patterns)[1] ){
idxs_eq<-which(apply(Z, 1, function(x) all.equal(x , patterns[r,])) == "TRUE")
#C[idxs_eq]<-'r'
L[r]<-length(idxS_eq)
}
L <- rep(0,dim(patterns)[1])
for(r in 1:dim(patterns)[1] ){
idxs_eq<-which(apply(Z, 1, function(x) all.equal(x , patterns[r,])) == "TRUE")
#C[idxs_eq]<-'r'
L[r]<-length(idxs_eq)
}
L
order(L)
L[order(L)]
order(L,decreasing=TRUE)
L[order(L,decreasing=true)]
L[order(L,decreasing=TRUE)]
patterns<-patterns[order(L,decreasing=TRUE),]
patterns
C <- rep(0,N)
C
C[1]<-r
C
C[1]<-'r'
C
C[c(1,2)]<-'r'
C
rm(list=ls())
# Aqui pones el path de tu directorio. Lo puedes obtener con getwd()
setwd("~/Documents/Working_papers/FAP_Rpackage/GLFM/src/GLFMR")
source("GLFM_infer.R")
source("GLFM_computeMAP.R")
source("GLFM_complete.R")
source("GLFM_computePDF.R")
X <- matrix(rnorm(10,0,1),nrow=10,ncol=5)
C <- c('g','g','g','g','g')
m0 <- matrix(0,10,2)
params<-list("Niter"=0)
Z <- apply(m0, c(1,2), function(x) sample(c(0,1),1,prob=c(0.8,0.2)))
data<-list("X"=X,"C"=C)
# GLFM_infer, c() es para un vector vacio,
# te devuelve una lista de listas: output$hidden y output$params
output<-GLFM_infer(data,params)
source("init_default_params.R")
rm(list=ls())
# Aqui pones el path de tu directorio. Lo puedes obtener con getwd()
setwd("~/Documents/Working_papers/FAP_Rpackage/GLFM/src/GLFMR")
source("GLFM_infer.R")
source("GLFM_computeMAP.R")
source("GLFM_complete.R")
source("GLFM_computePDF.R")
source("init_default_params.R")
X <- matrix(rnorm(10,0,1),nrow=10,ncol=5)
C <- c('g','g','g','g','g')
m0 <- matrix(0,10,2)
params<-list("Niter"=0)
Z <- apply(m0, c(1,2), function(x) sample(c(0,1),1,prob=c(0.8,0.2)))
data<-list("X"=X,"C"=C)
# GLFM_infer, c() es para un vector vacio,
# te devuelve una lista de listas: output$hidden y output$params
output<-GLFM_infer(data,params)
rm(list=ls())
# Aqui pones el path de tu directorio. Lo puedes obtener con getwd()
setwd("~/Documents/Working_papers/FAP_Rpackage/GLFM/src/GLFMR")
source("GLFM_infer.R")
source("GLFM_computeMAP.R")
source("GLFM_complete.R")
source("GLFM_computePDF.R")
source("init_default_params.R")
X <- matrix(rnorm(10,0,1),nrow=10,ncol=5)
C <- c('g','g','g','g','g')
m0 <- matrix(0,10,2)
params<-list("Niter"=0)
Z <- apply(m0, c(1,2), function(x) sample(c(0,1),1,prob=c(0.8,0.2)))
data<-list("X"=X,"C"=C)
# GLFM_infer, c() es para un vector vacio,
# te devuelve una lista de listas: output$hidden y output$params
output<-GLFM_infer(data,list(Z,params))
rm(list=ls())
# Aqui pones el path de tu directorio. Lo puedes obtener con getwd()
setwd("~/Documents/Working_papers/FAP_Rpackage/GLFM/src/GLFMR")
source("GLFM_infer.R")
source("GLFM_computeMAP.R")
source("GLFM_complete.R")
source("GLFM_computePDF.R")
source("init_default_params.R")
X <- matrix(rnorm(10,0,1),nrow=10,ncol=5)
C <- c('g','g','g','g','g')
m0 <- matrix(0,10,2)
m0 <- matrix(0,10,2)
params<-list("Nsim"=0)
Z <- apply(m0, c(1,2), function(x) sample(c(0,1),1,prob=c(0.8,0.2)))
data<-list("X"=X,"C"=C)
# GLFM_infer, c() es para un vector vacio,
# te devuelve una lista de listas: output$hidden y output$params
output<-GLFM_infer(data,list(Z,params))
output
compileAttributes("~/FAP_Rpackage/GLFM/src/RcppGSLExample",verbose=TRUE)
compileAttributes("~/Documents/Working_papers/FAP_Rpackage/GLFM/src/RcppGSLExample",verbose=TRUE)
require(Rcpp)
compileAttributes("~/Documents/Working_papers/FAP_Rpackage/GLFM/src/RcppGSLExample",verbose=TRUE)
install.packages("~/Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM", repos = NULL, type="source")
install.packages("~/Documents/Working_papers/FAP_Rpackage/GLFM/src/RcppGSLExample", repos = NULL, type="source")
compileAttributes("~/Documents/Working_papers/FAP_Rpackage/GLFM/src/RcppGSLExample",verbose=TRUE)
install.packages("~/Documents/Working_papers/FAP_Rpackage/GLFM/src/RcppGSLExample", repos = NULL, type="source")
install.packages("~/Documents/Working_papers/FAP_Rpackage/GLFM/src/RcppGSLExample", repos = NULL, type="source")
rm(list=ls())
setwd("~/Documents/Working_papers/FAP_Rpackage/GLFM/src/GLFMR")
source("GLFM_infer.R")
source("GLFM_computeMAP.R")
source("generate_toy_images.R")
source("init_default_params.R")
# Generative model
N<-200
s2x<-0.5
#Initialisation
data_gen<- generate_toy_images(N,s2x)
data<-list("X"=data_gen$X,"C"=data_gen$C)
#gT<-list(""=)
m0<-matrix(0,nrow=N,ncol=1)
Z <- apply(m0, c(1,2), function(x) sample(c(0,1),1,prob=c(0.8,0.2)))
# define params
alpha <- 2   # Concentration parameter of the IBP
Niter <- 0  # Number of iterations for the Gibbs sampler
maxK <- 10
params<-list("alpha"=alpha,"Niter"=Niter,"maxK"=maxK)
# Inference
output <- GLFM_infer(data, list(Z,params))
