s2<-c(1 3 2)
s3<-c( 3 2 1)
s4<-c(3 1 2)
s5<-c (2 3 1)
s6<-c(2 1 3)
)
)
)))
))))
s1
s1<-c(1 2 3)
s2<-c(1 3 2)
s3<-c( 3 2 1)
s4<-c(3 1 2)
s5<-c(2 3 1)
s6<-c(2 1 3)
s1<-c(1,2,3)
s2<-c(1,3,2)
s3<-c(3,2,1)
s4<-c(3,1,2)
s5<-c(2,3,1)
s6<-c(2,1,3)
S<-matrix(s1,s2,s3,s4,s5,s6,ncol=3,nrow=2)
S<-matrix(s1,s2,s3,s4,s5,s6,ncol=2,nrow=3)
S<-matrix(s1,s2,s3,ncol=2,nrow=3)
S<-matrix(c(s1,s2,s3,s4,s5,s6),ncol=3,nrow=2)
S
S<-matrix(c(s1,s2,s3,s4,s5,s6),ncol=2,nrow=3)
S
S<-matrix(c(s1,s2,s3,s4,s5,s6),ncol=3,nrow=6)
S
s[1]<-c(1,2,3)
s<-matrix(rep(0,12),ncol=2,nrow=6)
s
s<-matrix(rep(0,12),ncol=3,nrow=6)
s
S<-matrix(rep(0,12),ncol=3,nrow=6)
S[1,:]<-c(1,2,3)
S<-matrix(rep(0,12),ncol=3,nrow=6)
S[1,]<-c(1,2,3)
S
help(for)
help("for")
S<-matrix(rep(0,36),ncol=6,nrow=6)
D
Dist.mat<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat
require(PerMallows)
S<-matrix(rep(0,12),ncol=3,nrow=6)
S[1,]<-c(1,2,3)
S[2,]<-c(1,3,2)
S[3,]<-c(3,2,1)
S[4,]<-c(3,1,2)
S[5,]<-c(2,3,1)
S[6,]<-c(2,1,3)
Dist.mat<-matrix(rep(0,36),ncol=6,nrow=6)
for(ii in 1:6){
for(jj in 1:6){
Dist.mat(ii,jj)<-distance(S[ii,],S[jj,], dist.name = "kendall")
}
}
require(PerMallows)
Dist.mat[1,1]
S<-matrix(rep(0,12),ncol=3,nrow=6)
S[1,]<-c(1,2,3)
S[2,]<-c(1,3,2)
S[3,]<-c(3,2,1)
S[4,]<-c(3,1,2)
S[5,]<-c(2,3,1)
S[6,]<-c(2,1,3)
Dist.mat<-matrix(rep(0,36),ncol=6,nrow=6)
for(ii in 1:6){
for(jj in 1:6){
Dist.mat(ii,jj)<-distance(S[ii,],S[jj,], dist.name = "kendall")
}
}
Dist.mat[1,1]
require(PerMallows)
S<-matrix(rep(0,12),ncol=3,nrow=6)
S[1,]<-c(1,2,3)
S[2,]<-c(1,3,2)
S[3,]<-c(3,2,1)
S[4,]<-c(3,1,2)
S[5,]<-c(2,3,1)
S[6,]<-c(2,1,3)
Dist.mat<-matrix(rep(0,36),ncol=6,nrow=6)
for(ii in 1:6){
for(jj in 1:6){
Dist.mat[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "kendall")
}
}
Dist.mat
help("eigen")
eigen(Dist.mat)
S<-matrix(rep(0,12),ncol=3,nrow=6)
S[1,]<-c(1,2,3)
S[2,]<-c(1,3,2)
S[3,]<-c(3,2,1)
S[4,]<-c(3,1,2)
S[5,]<-c(2,3,1)
S[6,]<-c(2,1,3)
Dist.mat.ken<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.cal<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.ul<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.hamming<--matrix(rep(0,36),ncol=6,nrow=6)
for(ii in 1:6){
for(jj in 1:6){
Dist.mat.ken[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "kendall")
Dist.mat.cal[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "caley")
Dist.mat.ul[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "ulam")
Dist.mat.ham[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "hamming")
}
}
S<-matrix(rep(0,12),ncol=3,nrow=6)
S[1,]<-c(1,2,3)
S[2,]<-c(1,3,2)
S[3,]<-c(3,2,1)
S[4,]<-c(3,1,2)
S[5,]<-c(2,3,1)
S[6,]<-c(2,1,3)
Dist.mat.ken<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.cal<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.ul<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.hamming<--matrix(rep(0,36),ncol=6,nrow=6)
for(ii in 1:6){
for(jj in 1:6){
Dist.mat.ken[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "kendall")
Dist.mat.cal[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "Cayley")
Dist.mat.ul[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "ulam")
Dist.mat.ham[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "hamming")
}
}
S<-matrix(rep(0,12),ncol=3,nrow=6)
S[1,]<-c(1,2,3)
S[2,]<-c(1,3,2)
S[3,]<-c(3,2,1)
S[4,]<-c(3,1,2)
S[5,]<-c(2,3,1)
S[6,]<-c(2,1,3)
Dist.mat.ken<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.cal<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.ul<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.hamming<--matrix(rep(0,36),ncol=6,nrow=6)
for(ii in 1:6){
for(jj in 1:6){
Dist.mat.ken[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "kendall")
Dist.mat.cal[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "Cayley")
Dist.mat.ul[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "ulam")
Dist.mat.ham[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "hamming")
}
}
S<-matrix(rep(0,12),ncol=3,nrow=6)
S[1,]<-c(1,2,3)
S[2,]<-c(1,3,2)
S[3,]<-c(3,2,1)
S[4,]<-c(3,1,2)
S[5,]<-c(2,3,1)
S[6,]<-c(2,1,3)
Dist.mat.ken<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.cal<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.ul<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.ham<--matrix(rep(0,36),ncol=6,nrow=6)
for(ii in 1:6){
for(jj in 1:6){
Dist.mat.ken[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "kendall")
Dist.mat.cal[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "Cayley")
Dist.mat.ul[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "ulam")
Dist.mat.ham[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "hamming")
}
}
Dist.mat.ham
Dist.mat.ul
Dist.mat.ken
Dist.mat.cal
eigen(Dist.mat.ham)$values
eigen(Dist.mat.ul)$values
eigen(Dist.mat.cal)$values
eigen(Dist.mat.ken)$values
eigen(Dist.mat.ken,symmetric=TRUE)$values
help("cor")
cor(S[1,],S[2,],method="spearman")
cor(S[1,],S[3,],method="spearman")
install.packages("StatMethRank")
bu<-generate.perms(3, k = 3, vec = 1:3)
require(StatMethRank)
bu<-generate.perms(3, k = 3, vec = 1:3)
help("generate.perms")
generate.perms(10, 6)
help("generate")
help("generate.perm")
help("generate.comb")
permutations.of(3, alert = TRUE)
n<-3
S<-permutations.of(n, alert = TRUE)
perm2cycles(c(1,5,2,3,4)
)
n<-3
S<-permutations.of(n, alert = TRUE)
Dist.mat.ken<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.cal<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.ul<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.ham<--matrix(rep(0,36),ncol=6,nrow=6)
for(ii in 1:6){
for(jj in 1:6){
Dist.mat.ken[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "kendall")
Dist.mat.cal[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "Cayley")
Dist.mat.ul[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "ulam")
Dist.mat.ham[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "hamming")
}
}
hclust(Dist.mat.ken)
Dist.mat.ken
hclust(is.dist(Dist.mat.ken)
)
hclust(is.dist(Dist.mat.ken,method = "complete")
)
hclust(is.dist(Dist.mat.ken),method = "complete")
aa<-hclust(is.dist(Dist.mat.ken),method = "complete")
aa<-hclust(Dist.mat.ken,method = "complete")
help("dist")
aa<-hclust(as.dist(Dist.mat.ken),method = "complete")
aa<-hclust(as.dist(Dist.mat.ken),method = "complete")
plot(aa)
aa<-hclust(as.dist(Dist.mat.cal),method = "complete")
aa<-hclust(as.dist(Dist.mat.ken),method = "complete")
aa<-hclust(as.dist(Dist.mat.ham),method = "complete")
plot(aa)
aa<-hclust(as.dist(Dist.mat.cal),method = "complete")
plot(aa)
aa<-hclust(as.dist(Dist.mat.cal),method = "single")
plot(aa)
aa<-hclust(as.dist(Dist.mat.ken),method = "single")
plot(aa)
aa<-hclust(as.dist(Dist.mat.ken),method = "average")
plot(aa)
help("mallow")
help("mallow")
??mallowâ€™
??mallow
n<-3
lamb<-0.1
# Creates a matrix with all possible permutations of n, size n! x n
S<-permutations.of(n, alert = TRUE)
Dist.mat.ken<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.cal<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.ul<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.ham<--matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.mall<-matrix(rep(0,36),ncol=6,nrow=6)
# Compute different distance matrices
for(ii in 1:6){
for(jj in 1:6){
Dist.mat.ken[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "kendall")
Dist.mat.cal[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "Cayley")
Dist.mat.ul[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "ulam")
Dist.mat.ham[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "hamming")
Dist.mat.mall[ii,jj]<-2*(1-exp(-lamb*Dist.mat.ken[ii,jj]))
}
}
Dist.mat.mall
aa<-hclust(as.dist(Dist.mat.mall),method = "complete")
plot(aa)
aa<-hclust(as.dist(Dist.mat.mall),method = "single")
plot(aa)
aa<-hclust(as.dist(Dist.mat.mall),method = "average")
plot(aa)
aa<-hclust(as.dist(Dist.mat.mall),method = "complete")
plot(aa)
setwd("~/Documents/Working_papers_2016/SnKernels/R_code_Jiao")
rm(list = ls())
getwd
getwd()
setwd("~/Documents/Working_papers_2016/SnKernels/R_code_Jiao")
cd Documents
require(installR)
install.packages("installR")
Rcpp.hpp
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
require(RcppGSL)
install.packages("RcppGSL")
install.packages("RcppGSL")
require(RcppGSL)
install.packages('gsl',type = 'source')
install.packages('gsl',type = 'source')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
library("RGLFM")
rcpp_hello_world() # Try the C++ function generated in the template
compileAttributes("~/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM",verbose=TRUE)
install.packages("~/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM", repos = NULL, type="source")
library(Rcpp)
sessionInfo()
library(RcppGSL)
sessionInfo()
var1<-c("HOLA")
sapply(var1, tolower)
length(var1)
varargin<-c(1,2)
varargin_size<-length(varargin)
switch(varargin_size,"0"=hidden <-c(),"1"="bu","2"="bu1")
varargin
length(varargin)
switch(varargin_size,0=hidden <-c(),1="bu",2="bu1")
switch(varargin_size,varargin_size==0{"hola"}, varargin_size==1{"hola1"})
switch(varargin_size,varargin_size==0, varargin_size==1)
switch(varargin_size,varargin_size==0, varargin_size==1,varargin_size==2)
switch(varargin_size,0,1,2)
varargin_size
params_names-<-c("missing","alpha","bias","s2u","s2B","Niter","maxK","verbose","numS","t","t_1","dt_1")
params_names<-c("missing","alpha","bias","s2u","s2B","Niter","maxK","verbose","numS","t","t_1","dt_1")
params<-c("alpha","maxK")
(params==params_names)
find(params==params_names)
params %in% params_names
which(params %in% params_names)
which(params_names %in% params)
paste("params"params_names[idx])
paste("params",params_names[idx])
idx_to_fill<-which(params_names %in% params)
paste("params",params_names[idx_to_fill])
paste("params",params_names[idx_to_fill],sep="")
paste("params",params_names[idx_to_fill],sep=".")
data<-matrix(0,ncol=2,nrow=3)
dim(data)
dim(data,s)
dim(data,2)
dim(data)[2]
list(1,2)
list(1,dim(data)[2] )
param_values<-c(-1,1,0,0.01,1,1000,dim(data.X)[2],1,100,list(1,dim(data.X)[2]),list(1,dim(data.X)[2]),list(1,dim(data.X)[2]))
param_values<-c(-1,1,0,0.01,1,1000,dim(data)[2],1,100,list(1,dim(data)[2]),list(1,dim(data)[2]),list(1,dim(data)[2]))
param_values
param_values<-list(-1,1,0,0.01,1,1000,dim(data)[2],1,100,list(1,dim(data)[2]),list(1,dim(data)[2]),list(1,dim(data)[2]))
param_values
param_values[[12]]
names(param_values)<-params_names
param_values
idx_to_fill
params
param_values[idx_to_fill]
params_to_return<-param_values[idx_to_fill]
params_to_return
is.list(param_values)
names(params_to_return)<-params_names[idx_to_fill]
params_to_return
params_names
filled_param_names<-paste("params",params_names[idx_to_fill],sep=".")
param_values<-list(-1,1,0,0.01,1,1000,dim(data)[2],1,100,list(1,dim(data)[2]),list(1,dim(data)[2]),list(1,dim(data)[2]))
#names(param_values)<-param_names
params_to_return<-param_values[idx_to_fill]
names(params_to_return)<-filled_params_names
names(params_to_return)<-filled_param_names
params_to_return
X<-matrix(0,nrow=2,ncol=3)
Z<-matrix(1,nrow=2,ncol=3)
data<-list("X"=X,"Z"=Z)
data$X
data$Z
getwd()
cd Documents
setwd("~/Documents/Working_papers/FAP_Rpackage/GLFM/src/GLFMR")
source("init_default_params.R")
data
params<-c()
init_default_params(data,params)
length(params)
source("init_default_params.R")
init_default_params(data,params)
params<-c("alpha")
init_default_params(data,params)
C<-Z
data<-list("X"=X,"C"=Z)
varargin<-list(Z,c("alpha","bias"))
source("GLFM_infer.R")
source("GLFM_infer.R")
GLFM_infer(data,varargin)
varargin[2]
unlist(varargin[2])
varargin[2]
unlist(varargin[1])
as.matrix(unlist(varargin[1]))
as.matrix(unlist(varargin[1]),nrow=2,ncol=2)
as.matrix(unlist(varargin[1]),ncol=2,byrow=TRUE)
as.matrix(unlist(varargin[1]),ncol=2,byrow=FALSE)
unlist(varargin[1])
varargin[1]
as.matrix(varargin[1])
unlist(as.matrix(varargin[1]))
unlist(as.matrix(varargin[1]),byrow=true)
GLFM_infer(data,varargin)
varargin[2]
init_default_params(data, unlist(varargin[2]))
source("GLFM_infer.R")
source("init_default_params.R")
init_default_params(data, unlist(varargin[2]))
GLFM_infer(data,varargin)
source("GLFM_infer.R")
GLFM_infer(data,varargin)
source("GLFM_infer.R")
GLFM_infer(data,varargin)
source("init_default_params.R")
GLFM_infer(data,varargin)
length(hidden==0)
hidden=c()
length(hidden==0)
length(hidden)
length(hidden)
help("randu")
help(rnd)
runif(1)
runif(1,2)
runif(1,2,2)
help(runif)
runif(10)
runif(c(10,2))
apply(m0, c(1,2), function(x) sample(c(0,1),1))
r <- 1000
c <- 1000
m0 <- matrix(0, r, c)
r<-2
c<-3
r <- 1000
c <- 1000
m0 <- matrix(0, r, c)
apply(m0, c(1,2), function(x) sample(c(0,1),1))
r<-2
c<-3
m0 <- matrix(0, r, c)
m0
apply(m0, c(1,2), function(x) runif)
apply(m0, c(1,2), function(x) runif(1))
apply(m0, c(1,2), function(x) runif(c))
m0<-matrix(0,N,2)
Z <- apply(m0, c(1,2), function(x) runif(1))
N<-3
m0<-matrix(0,N,2)
Z <- apply(m0, c(1,2), function(x) runif(1))
}
m0<-matrix(0,N,2)
Z <- apply(m0, c(1,2), function(x) runif(1))
Z
m0<-matrix(0,N,2)
Z <- apply(m0, c(2,1), function(x) runif(1))
Z
Z <- apply(m0, c(1,2), function(x) runif(1)>0.8)
Z
help(sample)
Z <- apply(m0, c(1,2), function(x) sample(c(0,1),1,prob=0.8))
Z <- apply(m0, c(1,2), function(x) sample(c(0,1),1,prob=c(0.8,0.2)))
Z
Z <- apply(m0, c(1,2), function(x) sample(c(0,1),1,prob=c(0.8,0.2)))
Z
params$bias == 1
params$bias = 1
Z <-c(rep(1,N),Z)
Z
Z <- apply(m0, c(1,2), function(x) sample(c(0,1),1,prob=c(0.8,0.2)))
Z
Z <-c(t(rep(1,N)),Z)
Z
a <- cbind(a,apply(a[,1:10],1,mean))
a<-Z
a <- cbind(a,apply(a[,1:10],1,mean))
a <- cbind(a,apply(a[,2],1,mean))
a <- cbind(a,apply(a[,N],1,mean))
a
Z <- apply(m0, c(1,2), function(x) sample(c(0,1),1,prob=c(0.8,0.2)))
a<-Z
a <- cbind(a,apply(a[,N],1,mean))
a <- cbind(a,apply(a[,2],1,mean))
a
cbind(Z,rep(1,N))
help("is.nan")
rep(1,D)
R<-rep(1,D)
rep(3,1)
rep(1,3)
X<-matrix(0,nrow=2,ncol=3)
X
X[1,1]<-NaN
X
X[2,3]<-NaN
X
isnan[X]
isnan(X)
is.nan(X)
X[is.nan(X)]==1
X[which(is.nan(X))]==1
X[which(is.nan(X))]
X
X[which(is.nan(X))]=1
X
help("list")
vector("list", 5)
lista_de_isa<-vector("list", 5)
lista_de_isa[1]
lista_de_isa[5]
