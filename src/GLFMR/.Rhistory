library(caret)
library(parallel)
library(mvtnorm)
library(reshape2)
library(ggplot2)
library(gplots)
library(kernrank)
library(flexclust)
library(Rankcluster)
data(APA)
head(APA)
dat <- APA$frequency[ ,1:(APA$m)]
freq <- APA$frequency[ ,"frequency", drop = TRUE]
freq
dat
distmat <- AllKendall(r = dat, seqs = dat)
distmat
data1<-do.call("rbind", list(1:5,5:1,c(3,2,1,4,5)))
data1
data2<-do.call("rbind", list(1:5,5:1))
s.K.d.mat<-AllKendall(data1,data2)
s.K.d.mat
lambda<-0.1
M.k.kmat<-exp(-lambda*s.K.d.mat)
M.k.kamt
M.k.kmat
data1<-do.call("rbind", list(1:5,c(3,2,1,4,5)))
s.K.d.mat<-AllKendall(data1,data2)
s.K.d.mat
data1
data2
data1<-do.call("rbind", list(1:5,5:1,c(3,2,1,4,5)))
data2<-do.call("rbind", list(1:5,5:1))
data
data1
data2
s.K.d.mat<-AllKendall(data1,data2)
library(kernrank)
s.K.d.mat<-AllKendall(data1,data2)
s.K.d.mat
data1<-do.call("rbind", list(1:3,c(1,3,2),c(3,2,1), c(3,1,2), c(2,3,1), c(2,1,3))
)
data1
data2<-data1
data2
s.K.d.mat<-AllKendall(data1,data2)
library(kernrank)
s.K.d.mat<-AllKendall(data1,data2)
s.K.d.mat
eige(s.K.d.mat)
eigen(s.K.d.mat)
data1
data2
A
s.K.d.mat
hclust(s.K.d.mat, method = "complete")
hclust(dist(s.K.d.mat), method = "complete")
hc<-hclust(dist(s.K.d.mat), method = "complete")
plot(hc)
hc<-hclust(dist(s.K.d.mat), method = "average")
plot(hc)
install.packages("PerMallows")
require(PerMallows)
S<-[c(1 2 3), c(1 3 2)]
S<-matrix(c(1 2 3), c(1 3 2))
S<-matrix(c(1 2 3), c(1 3 2),row =2, column =3)
help("matrix")
S<-matrix(c(1 2 3, 1 3 2),row =2, column =3)
S<-matrix(c(1 2 3, 1 3 2),nrow =2, ncol =3)
S<-matrix(c(1 2 3, 1 3 2), nrow =2, ncol =3)
matrix(c(1 2, 3 4), ncol=2, nrow=2)
mdat <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3)
S<-matrix(c(1 2 3, 1 3 2), nrow = 2, ncol = 3)
S<-matrix(c(1,2,3, 1,3,2), nrow = 2, ncol = 3)
S
S<-matrix(c(1,1,2, 3,3,1), nrow = 2, ncol = 3)
S
S<-matrix(c(1,1,2, 3,3,2), nrow = 2, ncol = 3)
S
S<-matrix(c(1,1,2, 3,3,2, ), nrow = 2, ncol = )
S<-matrix(c(1,1,2, 3,3,2)
)
S
S<-matrix(c(1,1,2,c(3,3,2))
S
S<-matrix(c(1,1,2),c(3,3,2))
S
S<-matrix(c(1,1,2)'',c(3,3,2)')
S<-matrix(c(1,1,2),c(3,3,2)')
S
s1<-c(1 2 3)
s2<-c(1 3 2)
s3<-c( 3 2 1)
s4<-c(3 1 2)
s5<-c (2 3 1)
s6<-c(2 1 3)
)
)
)))
))))
s1
s1<-c(1 2 3)
s2<-c(1 3 2)
s3<-c( 3 2 1)
s4<-c(3 1 2)
s5<-c(2 3 1)
s6<-c(2 1 3)
s1<-c(1,2,3)
s2<-c(1,3,2)
s3<-c(3,2,1)
s4<-c(3,1,2)
s5<-c(2,3,1)
s6<-c(2,1,3)
S<-matrix(s1,s2,s3,s4,s5,s6,ncol=3,nrow=2)
S<-matrix(s1,s2,s3,s4,s5,s6,ncol=2,nrow=3)
S<-matrix(s1,s2,s3,ncol=2,nrow=3)
S<-matrix(c(s1,s2,s3,s4,s5,s6),ncol=3,nrow=2)
S
S<-matrix(c(s1,s2,s3,s4,s5,s6),ncol=2,nrow=3)
S
S<-matrix(c(s1,s2,s3,s4,s5,s6),ncol=3,nrow=6)
S
s[1]<-c(1,2,3)
s<-matrix(rep(0,12),ncol=2,nrow=6)
s
s<-matrix(rep(0,12),ncol=3,nrow=6)
s
S<-matrix(rep(0,12),ncol=3,nrow=6)
S[1,:]<-c(1,2,3)
S<-matrix(rep(0,12),ncol=3,nrow=6)
S[1,]<-c(1,2,3)
S
help(for)
help("for")
S<-matrix(rep(0,36),ncol=6,nrow=6)
D
Dist.mat<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat
require(PerMallows)
S<-matrix(rep(0,12),ncol=3,nrow=6)
S[1,]<-c(1,2,3)
S[2,]<-c(1,3,2)
S[3,]<-c(3,2,1)
S[4,]<-c(3,1,2)
S[5,]<-c(2,3,1)
S[6,]<-c(2,1,3)
Dist.mat<-matrix(rep(0,36),ncol=6,nrow=6)
for(ii in 1:6){
for(jj in 1:6){
Dist.mat(ii,jj)<-distance(S[ii,],S[jj,], dist.name = "kendall")
}
}
require(PerMallows)
Dist.mat[1,1]
S<-matrix(rep(0,12),ncol=3,nrow=6)
S[1,]<-c(1,2,3)
S[2,]<-c(1,3,2)
S[3,]<-c(3,2,1)
S[4,]<-c(3,1,2)
S[5,]<-c(2,3,1)
S[6,]<-c(2,1,3)
Dist.mat<-matrix(rep(0,36),ncol=6,nrow=6)
for(ii in 1:6){
for(jj in 1:6){
Dist.mat(ii,jj)<-distance(S[ii,],S[jj,], dist.name = "kendall")
}
}
Dist.mat[1,1]
require(PerMallows)
S<-matrix(rep(0,12),ncol=3,nrow=6)
S[1,]<-c(1,2,3)
S[2,]<-c(1,3,2)
S[3,]<-c(3,2,1)
S[4,]<-c(3,1,2)
S[5,]<-c(2,3,1)
S[6,]<-c(2,1,3)
Dist.mat<-matrix(rep(0,36),ncol=6,nrow=6)
for(ii in 1:6){
for(jj in 1:6){
Dist.mat[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "kendall")
}
}
Dist.mat
help("eigen")
eigen(Dist.mat)
S<-matrix(rep(0,12),ncol=3,nrow=6)
S[1,]<-c(1,2,3)
S[2,]<-c(1,3,2)
S[3,]<-c(3,2,1)
S[4,]<-c(3,1,2)
S[5,]<-c(2,3,1)
S[6,]<-c(2,1,3)
Dist.mat.ken<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.cal<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.ul<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.hamming<--matrix(rep(0,36),ncol=6,nrow=6)
for(ii in 1:6){
for(jj in 1:6){
Dist.mat.ken[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "kendall")
Dist.mat.cal[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "caley")
Dist.mat.ul[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "ulam")
Dist.mat.ham[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "hamming")
}
}
S<-matrix(rep(0,12),ncol=3,nrow=6)
S[1,]<-c(1,2,3)
S[2,]<-c(1,3,2)
S[3,]<-c(3,2,1)
S[4,]<-c(3,1,2)
S[5,]<-c(2,3,1)
S[6,]<-c(2,1,3)
Dist.mat.ken<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.cal<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.ul<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.hamming<--matrix(rep(0,36),ncol=6,nrow=6)
for(ii in 1:6){
for(jj in 1:6){
Dist.mat.ken[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "kendall")
Dist.mat.cal[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "Cayley")
Dist.mat.ul[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "ulam")
Dist.mat.ham[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "hamming")
}
}
S<-matrix(rep(0,12),ncol=3,nrow=6)
S[1,]<-c(1,2,3)
S[2,]<-c(1,3,2)
S[3,]<-c(3,2,1)
S[4,]<-c(3,1,2)
S[5,]<-c(2,3,1)
S[6,]<-c(2,1,3)
Dist.mat.ken<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.cal<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.ul<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.hamming<--matrix(rep(0,36),ncol=6,nrow=6)
for(ii in 1:6){
for(jj in 1:6){
Dist.mat.ken[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "kendall")
Dist.mat.cal[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "Cayley")
Dist.mat.ul[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "ulam")
Dist.mat.ham[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "hamming")
}
}
S<-matrix(rep(0,12),ncol=3,nrow=6)
S[1,]<-c(1,2,3)
S[2,]<-c(1,3,2)
S[3,]<-c(3,2,1)
S[4,]<-c(3,1,2)
S[5,]<-c(2,3,1)
S[6,]<-c(2,1,3)
Dist.mat.ken<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.cal<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.ul<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.ham<--matrix(rep(0,36),ncol=6,nrow=6)
for(ii in 1:6){
for(jj in 1:6){
Dist.mat.ken[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "kendall")
Dist.mat.cal[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "Cayley")
Dist.mat.ul[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "ulam")
Dist.mat.ham[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "hamming")
}
}
Dist.mat.ham
Dist.mat.ul
Dist.mat.ken
Dist.mat.cal
eigen(Dist.mat.ham)$values
eigen(Dist.mat.ul)$values
eigen(Dist.mat.cal)$values
eigen(Dist.mat.ken)$values
eigen(Dist.mat.ken,symmetric=TRUE)$values
help("cor")
cor(S[1,],S[2,],method="spearman")
cor(S[1,],S[3,],method="spearman")
install.packages("StatMethRank")
bu<-generate.perms(3, k = 3, vec = 1:3)
require(StatMethRank)
bu<-generate.perms(3, k = 3, vec = 1:3)
help("generate.perms")
generate.perms(10, 6)
help("generate")
help("generate.perm")
help("generate.comb")
permutations.of(3, alert = TRUE)
n<-3
S<-permutations.of(n, alert = TRUE)
perm2cycles(c(1,5,2,3,4)
)
n<-3
S<-permutations.of(n, alert = TRUE)
Dist.mat.ken<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.cal<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.ul<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.ham<--matrix(rep(0,36),ncol=6,nrow=6)
for(ii in 1:6){
for(jj in 1:6){
Dist.mat.ken[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "kendall")
Dist.mat.cal[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "Cayley")
Dist.mat.ul[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "ulam")
Dist.mat.ham[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "hamming")
}
}
hclust(Dist.mat.ken)
Dist.mat.ken
hclust(is.dist(Dist.mat.ken)
)
hclust(is.dist(Dist.mat.ken,method = "complete")
)
hclust(is.dist(Dist.mat.ken),method = "complete")
aa<-hclust(is.dist(Dist.mat.ken),method = "complete")
aa<-hclust(Dist.mat.ken,method = "complete")
help("dist")
aa<-hclust(as.dist(Dist.mat.ken),method = "complete")
aa<-hclust(as.dist(Dist.mat.ken),method = "complete")
plot(aa)
aa<-hclust(as.dist(Dist.mat.cal),method = "complete")
aa<-hclust(as.dist(Dist.mat.ken),method = "complete")
aa<-hclust(as.dist(Dist.mat.ham),method = "complete")
plot(aa)
aa<-hclust(as.dist(Dist.mat.cal),method = "complete")
plot(aa)
aa<-hclust(as.dist(Dist.mat.cal),method = "single")
plot(aa)
aa<-hclust(as.dist(Dist.mat.ken),method = "single")
plot(aa)
aa<-hclust(as.dist(Dist.mat.ken),method = "average")
plot(aa)
help("mallow")
help("mallow")
??mallowâ€™
??mallow
n<-3
lamb<-0.1
# Creates a matrix with all possible permutations of n, size n! x n
S<-permutations.of(n, alert = TRUE)
Dist.mat.ken<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.cal<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.ul<-matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.ham<--matrix(rep(0,36),ncol=6,nrow=6)
Dist.mat.mall<-matrix(rep(0,36),ncol=6,nrow=6)
# Compute different distance matrices
for(ii in 1:6){
for(jj in 1:6){
Dist.mat.ken[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "kendall")
Dist.mat.cal[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "Cayley")
Dist.mat.ul[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "ulam")
Dist.mat.ham[ii,jj]<-distance(S[ii,],S[jj,], dist.name = "hamming")
Dist.mat.mall[ii,jj]<-2*(1-exp(-lamb*Dist.mat.ken[ii,jj]))
}
}
Dist.mat.mall
aa<-hclust(as.dist(Dist.mat.mall),method = "complete")
plot(aa)
aa<-hclust(as.dist(Dist.mat.mall),method = "single")
plot(aa)
aa<-hclust(as.dist(Dist.mat.mall),method = "average")
plot(aa)
aa<-hclust(as.dist(Dist.mat.mall),method = "complete")
plot(aa)
setwd("~/Documents/Working_papers_2016/SnKernels/R_code_Jiao")
rm(list = ls())
getwd
getwd()
setwd("~/Documents/Working_papers_2016/SnKernels/R_code_Jiao")
cd Documents
require(installR)
install.packages("installR")
Rcpp.hpp
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
require(RcppGSL)
install.packages("RcppGSL")
install.packages("RcppGSL")
require(RcppGSL)
install.packages('gsl',type = 'source')
install.packages('gsl',type = 'source')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
Rcpp::sourceCpp('Documents/Working_papers/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM.cpp')
library("RGLFM")
rcpp_hello_world() # Try the C++ function generated in the template
compileAttributes("~/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM",verbose=TRUE)
install.packages("~/FAP_Rpackage/GLFM/src/Ccode/wrapper_R/RGLFM", repos = NULL, type="source")
library(Rcpp)
sessionInfo()
library(RcppGSL)
sessionInfo()
setwd("~/Documents/Working_papers/FAP_Rpackage/GLFM/src/GLFMR")
rm(list=ls())
source("GLFM_infer.R")
source("GLFM_computeMAP.R")
source("generate_toy_images.R")
# Generative model
N<-100
s2x<-0.5
#Initialisation
data_gen<- generate_toy_images(N,s2x)
data<-list("X"=data_gen$X,"C"=data_gen$C)
#gT<-list(""=)
m0<-matrix(0,nrow=N,ncol=1)
Z <- apply(m0, c(1,2), function(x) sample(c(0,1),1,prob=c(0.8,0.2)))
# define params
alpha <- 2   # Concentration parameter of the IBP
Niter <- 100  # Number of iterations for the Gibbs sampler
maxK <- 10
params<-list("alpha"=alpha,"Niter"=Niter,"maxK"=maxK)
# Inference
hidden <- GLFM_infer(data, list(Z,params))
Zp <-diag(Kest)
X_map <- GLFM_computeMAP(data$C, Zp, hidden, params,c())
hidden$B
hidden
Kest<-dim(hidden$B)[1]
Kest
Zp <-diag(Kest)
Zp
source("GLFM_computeMAP.R")
Kest<-dim(hidden$B)[1]
Zp <-diag(Kest)
X_map <- GLFM_computeMAP(data$C, Zp, hidden, params,c())
unlist(hidden$B[d])
Zp
Zp * unlist(hidden$B[d,])
Zp * unlist(hidden$B[1,])
dim(hidden$B)
