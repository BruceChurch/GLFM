sss
sss<-matrix(1,nrow=3,ncol=2)
sss[2,3]<-3
sss[1,2]<-10
sss[3,2]<-3
sss
sss<-c(sss;c(1,1))
sss<-c(sss,c(1,1))
sss
sss<-matrix(1,nrow=3,ncol=2)
sss[1,2]<-10
sss[3,2]<-3
sss
cbind(sss,c(1,1))
cbind(sss,c(1,1,1))
rbind(sss,c(1,1))
sapply(sss,unique)
a<-c(1 2 3)
a<-c(1, 2, 3)
b<-c(1,,4,5)
b<-c(1,4,5)
a==b
help(isany)
help(is.any)
all.equal(a,b)
identical(a,b)
identical(a,sss)
N<-5
m0<-matrix(0,N,2)
Z <- apply(m0, c(1,2), function(x) sample(c(0,1),1,prob=c(0.2,0.8)))
Z
patterns<-sapply(Z,unique)
patterns
patterns<-sapply(t(Z),unique)
patterns
duplicated(Z)
Z[duplicated(Z),]
Z[!duplicated(Z),]
patterns<-Z[!duplicated(Z),]
which(Z==patterns[1,])
patterns
patterns[1,]
Z
identical(Z,patterns[1,])
sapply(Z,function(x){Z[x,]==patterns[1,]})
which(apply(Z, 1, function(x) all.equal(x[1:2], patterns[1,])) == "TRUE")
which(apply(Z, 1, function(x) all.equal(x[1:2], patterns[2,])) == "TRUE")
patterns
which(apply(Z, 1, function(x) all.equal(x, patterns[2,])) == "TRUE")
which(apply(Z, 1, function(x) all.equal(x, patterns[3,])) == "TRUE")
which(apply(Z, 1, function(x) all.equal(x, patterns[4,])) == "TRUE")
patterns
L <- rep(0,dim(patterns)[1])
for(r in 1:dim(patterns)[1] ){
idxs_eq<-which(apply(Z, 1, function(x) all.equal(x , patterns[r,])) == "TRUE")
C[idxs_eq]<-'r'
L[r]<-length(idx_eq)
}
L <- rep(0,dim(patterns)[1])
for(r in 1:dim(patterns)[1] ){
idxs_eq<-which(apply(Z, 1, function(x) all.equal(x , patterns[r,])) == "TRUE")
#C[idxs_eq]<-'r'
L[r]<-length(idx_eq)
}
L <- rep(0,dim(patterns)[1])
for(r in 1:dim(patterns)[1] ){
idxs_eq<-which(apply(Z, 1, function(x) all.equal(x , patterns[r,])) == "TRUE")
#C[idxs_eq]<-'r'
L[r]<-length(idxS_eq)
}
L <- rep(0,dim(patterns)[1])
for(r in 1:dim(patterns)[1] ){
idxs_eq<-which(apply(Z, 1, function(x) all.equal(x , patterns[r,])) == "TRUE")
#C[idxs_eq]<-'r'
L[r]<-length(idxs_eq)
}
L
order(L)
L[order(L)]
order(L,decreasing=TRUE)
L[order(L,decreasing=true)]
L[order(L,decreasing=TRUE)]
patterns<-patterns[order(L,decreasing=TRUE),]
patterns
C <- rep(0,N)
C
C[1]<-r
C
C[1]<-'r'
C
C[c(1,2)]<-'r'
C
rm(list=ls())
graphics.off()
setwd("~/Documents/Working_papers/FAP_Rpackage/GLFM/src/GLFMR")
require(R.matlab)
require(ggplot2)
source("GLFM_infer.R")
source("GLFM_computeMAP.R")
source("GLFM_computePDF.R")
source("GLFM_plotPatterns.R")
source("remove_dims.R")
source("get_feature_patterns_sorted.R")
source("computeLeg.R")
datos_prostate<-readMat('prostate_v3.mat')
source("init_default_params.R")
Xauxi <- as.matrix(unlist(datos_prostate$data[2,1,1]),ncol=16,nrow= 502, byrow=TRUE)
Xfull<-aux<-matrix(Xauxi,nrow=502,ncol=16)
C<-unlist(datos_prostate$data[3,1,1],use.names = FALSE)
Cfull<-strsplit(as.character(C), "")
cat_labels_full <-unlist(datos_prostate$data[4,1,1],use.names = FALSE)
y_labels_full<-unlist(datos_prostate$data[5,1,1],use.names = FALSE)
y_labels_long_full<-unlist(datos_prostate$data[6,1,1],use.names = FALSE)
idx_toKeep <- c(1, 2, 4,13, 15)
X<-Xfull[,idx_toKeep]
C<-Cfull[[1]][idx_toKeep]
cat_labels<-cat_labels_full[idx_toKeep]
y_labels<-y_labels_full[idx_toKeep]
y_labels_long<-y_labels_long_full[idx_toKeep]
#params
param_names<-c("missing","s2u","s2B","alpha","Niter","maxK","bias")
missing<--1
s2u<-0.005
s2B<-1
alpha<-1
Niter<-100
maxK<-10
bias<-1
params<-list(missing,s2u,s2B,alpha,Niter,maxK,bias)
names(params)<-param_names
N<-dim(X)[1]
#m0<-matrix(0,N,2)
#Z <- apply(m0, c(1,2), function(x) sample(c(0,1),1,prob=c(0.8,0.2)))
#if(params$bias == 1 && length(params$bias)>0){
#  Z <-cbind(rep(1,N),Z)
#}
# Inference
Z<-c()
data_prost<-list("X"=X,"C"=C)
output <- GLFM_infer(data_prost, list(Z,params))
Zp <- diag(Kest)
Zp[,1] <- 1 # bias active
Zp <- Zp[1:(min(5,Kest)),]
leges <- computeLeg(Zp,c())
colours<-c('red','blue','green','pink','yellow')
GLFM_plotPatterns(data_prost,output$hidden,output$params,Zp, list("leges"=leges,"colours"=colours) )
leges <- computeLeg(Zp,c())
colours<-c('red','blue','green','pink','yellow')
GLFM_plotPatterns(data_prost,output$hidden,output$params,Zp, list("leges"=leges,"colours"=colours) )
leges
leges <- computeLeg(Zp,c())
Kest <-dim(output$hidden$B[[1]])[1]
Zp <- diag(Kest)
Zp[,1] <- 1 # bias active
Zp <- Zp[1:(min(5,Kest)),]
leges <- computeLeg(Zp,c())
colours<-c('red','blue','green','pink','yellow')
GLFM_plotPatterns(data_prost,output$hidden,output$params,Zp, list("leges"=leges,"colours"=colours) )
C
Zp
Kest
dim(Zp)
graphics.off()
data_prost$X
source("GLFM_infer.R")
source("computeLeg.R")
datos_prostate<-readMat('prostate_v3.mat')
source("init_default_params.R")
Xauxi <- as.matrix(unlist(datos_prostate$data[2,1,1]),ncol=16,nrow= 502, byrow=TRUE)
Xfull<-aux<-matrix(Xauxi,nrow=502,ncol=16)
C<-unlist(datos_prostate$data[3,1,1],use.names = FALSE)
Cfull<-strsplit(as.character(C), "")
cat_labels_full <-unlist(datos_prostate$data[4,1,1],use.names = FALSE)
y_labels_full<-unlist(datos_prostate$data[5,1,1],use.names = FALSE)
y_labels_long_full<-unlist(datos_prostate$data[6,1,1],use.names = FALSE)
idx_toKeep <- c(1, 2, 4,13, 15)
X<-Xfull[,idx_toKeep]
C<-Cfull[[1]][idx_toKeep]
cat_labels<-cat_labels_full[idx_toKeep]
y_labels<-y_labels_full[idx_toKeep]
y_labels_long<-y_labels_long_full[idx_toKeep]
#params
param_names<-c("missing","s2u","s2B","alpha","Niter","maxK","bias")
missing<--1
s2u<-0.005
s2B<-1
alpha<-1
Niter<-100
maxK<-10
bias<-1
params<-list(missing,s2u,s2B,alpha,Niter,maxK,bias)
names(params)<-param_names
N<-dim(X)[1]
#m0<-matrix(0,N,2)
#Z <- apply(m0, c(1,2), function(x) sample(c(0,1),1,prob=c(0.8,0.2)))
#if(params$bias == 1 && length(params$bias)>0){
#  Z <-cbind(rep(1,N),Z)
#}
# Inference
Z<-c()
data_prost<-list("X"=X,"C"=C)
output <- GLFM_infer(data_prost, list(Z,params))
data_prost
Data_test<-data_prost$X[1:10,]
Data_test
V_offset<-colMins(Data_test)
V_offset
bu<-apply(Data_test, 2, function(x)length(unique(x)))
bu
bu<-apply(Data_test, 2, function(x)(unique(x)))
bu
idx_catord<-which(data_prost$C=='c' | data_prost$C=='o')
idx_catord
C
bu<-apply(Data_test[,idx_catord], 2, function(x)(unique(x)))
bu
bu<-apply(Data_test[,idx_catord], 2, function(x)length(unique(x)))
bu
Data_test
V_offset<-colMins(Data_test)
V_offset
X_aux<-Data_test$X-V_offset_mat+1
X_aux<-Data_test-V_offset_mat+1
V_offset_mat<-matrix(V_offset,nrow=N,ncol=D,byrow=TRUE)
X_aux<-Data_test-V_offset+1
X_aux
idx_catord<-which(data$C=='c' | data$C=='o')
idx_catord<-which(data_prost$C=='c' | data_prost$C=='o')
idx_catord
Data_test[,idx_catord] <-X_aux[,idx_catord]
Data_test
Data_test<-data_prost$X[1:20,]
Data_test
Data_test<-data_prost$X[1:10,]
X_aux<-Data_test
aa<-max(X_aux)
V_offset<-colMins(X_aux)
V_offset
N<-dim(Data_test)[1]
N
D<-dim(Data_test)[2]
D
V_offset_mat<-matrix(V_offset,nrow=N,ncol=D,byrow=TRUE)
V_offset
V_offset_mat
X_aux<-Data_test-V_offset_mat+1
X_aux
idx_catord<-which(data_prost$C=='c' | data_prost$C=='o')
idx_catord
bu<-apply(X_aux[,idx_catord], 2, function(x)length(unique(x)))
bu
if(colMaxs(X_aux[,idx_catord])!=bu){
print("hay problemas")
}
data
colMaxs(X_aux)
colMaxs(X_aux[,idx_catord])
(colMaxs(X_aux[,idx_catord])!=bu)
if(colMaxs(X_aux[,idx_catord])!=bu){}
if(colMaxs(X_aux[,idx_catord])!=bu){print("bad")}
if(any(colMaxs(X_aux[,idx_catord])!=bu)){print("bad")}
idx_dat<-which(colMaxs(X_aux[,idx_catord])!=bu))
idx_dat<-which(colMaxs(X_aux[,idx_catord])!=bu)))
idx_dat<-which(colMaxs(X_aux[,idx_catord])!=bu))
which(colMaxs(X_aux[,idx_catord])!=bu)
idx_dat<-which(colMaxs(X_aux[,idx_catord])!=bu)
idx_dat
idx_max<-which(X[,idx_dat]==max(X[,idx_dat]))
idx_max
idx_max<-which(X_aux[,idx_dat]==max(X_aux[,idx_dat]))
idx_max
X_aux
max(X_aux[,idx_dat]))
max(X_aux[,idx_dat])
X_aux[idx_max,idx_dat]<-3
X_aux
idx_max
bu
X_aux[idx_max,idx_dat]<-6
X_aux
idxs_bad<-which(X_aux[,idx_dat]>bu[idx_dat])
idxs_bad
while(length(idxs_bad)>0){
X_aux[idxs_bad,idx_dat]<-X_aux[idxs_bad,idx_dat]-1
idxs_bad<-which(X[,idx_dat]>bu[idx_dat])
}
idx_dat
X_aux[idxs_bad,idx_dat]
idx_dat
X_aux
X_aux[3,2]
idxs_bad<-which(X[,idx_dat]>bu[idx_dat])
idxs_bad
idxs_bad<-which(X_aux[,idx_dat]>bu[idx_dat])
idxs_bad<-which(X_aux[,idx_dat]>bu[idx_dat])
idxs_bad
while(length(idxs_bad)>0){
X_aux[idxs_bad,idx_dat]<-X_aux[idxs_bad,idx_dat]-1
idxs_bad<-which(X_aux[,idx_dat]>bu[idx_dat])
}
X_aux
data_prost
Data_test<-data_prost[1:10,]
Data_test<-data_prost$X[1:10,]
X_aux<-Data_test
idxs_bad
source("GLFM_infer.R")
rm(list=ls())
graphics.off()
setwd("~/Documents/Working_papers/FAP_Rpackage/GLFM/src/GLFMR")
require(R.matlab)
require(ggplot2)
source("GLFM_infer.R")
source("GLFM_computeMAP.R")
source("GLFM_computePDF.R")
source("GLFM_plotPatterns.R")
source("remove_dims.R")
source("get_feature_patterns_sorted.R")
source("computeLeg.R")
datos_prostate<-readMat('prostate_v3.mat')
source("init_default_params.R")
Xauxi <- as.matrix(unlist(datos_prostate$data[2,1,1]),ncol=16,nrow= 502, byrow=TRUE)
Xfull<-aux<-matrix(Xauxi,nrow=502,ncol=16)
C<-unlist(datos_prostate$data[3,1,1],use.names = FALSE)
Cfull<-strsplit(as.character(C), "")
cat_labels_full <-unlist(datos_prostate$data[4,1,1],use.names = FALSE)
y_labels_full<-unlist(datos_prostate$data[5,1,1],use.names = FALSE)
y_labels_long_full<-unlist(datos_prostate$data[6,1,1],use.names = FALSE)
idx_toKeep <- c(1, 2, 4,13, 15)
X<-Xfull[,idx_toKeep]
C<-Cfull[[1]][idx_toKeep]
cat_labels<-cat_labels_full[idx_toKeep]
y_labels<-y_labels_full[idx_toKeep]
y_labels_long<-y_labels_long_full[idx_toKeep]
#params
param_names<-c("missing","s2u","s2B","alpha","Niter","maxK","bias")
missing<--1
s2u<-0.005
s2B<-1
alpha<-1
Niter<-100
maxK<-10
bias<-1
params<-list(missing,s2u,s2B,alpha,Niter,maxK,bias)
names(params)<-param_names
N<-dim(X)[1]
Z<-c()
data_prost<-list("X"=X,"C"=C)
output <- GLFM_infer(data_prost, list(Z,params))
Data_test<-data_prost$X[1:10,]
source("GLFM_infer.R")
Z<-c()
data_prost<-list("X"=X,"C"=C)
output <- GLFM_infer(data_prost, list(Z,params))
source("GLFM_infer.R")
Z<-c()
data_prost<-list("X"=X,"C"=C)
output <- GLFM_infer(data_prost, list(Z,params))
source("GLFM_infer.R")
Z<-c()
data_prost<-list("X"=X,"C"=C)
output <- GLFM_infer(data_prost, list(Z,params))
X_aux
X_aux<-data_prost$X[1:10,]
X_aux
aa<-max(X_aux)
X_aux[idx_missing] <- aa+1
V_offset<-colMins(X_aux)
V_offset_mat<-matrix(V_offset,nrow=N,ncol=D,byrow=TRUE)
X_aux<-data$X-V_offset_mat+1
N<-dim(X_aux)[1]
N
D<-dim(X_aux)[2]
D
V_offset_mat<-matrix(V_offset,nrow=N,ncol=D,byrow=TRUE)
V_offset_mat
X_aux<-data$X-V_offset_mat+1
X_aux<-X_aux-V_offset_mat+1
X_aux
idx_catord<-which(data$C=='c' | data$C=='o')
idx_catord<-which(data_prost$C=='c' | data_prost$C=='o')
idx_catord
bu<-apply(X_aux[,idx_catord], 2, function(x)length(unique(x)))
bu
idx_dat<--which(colMaxs(X_aux[,idx_catord])!=bu)
idx_dat
colMaxs(X_aux[,idx_catord])
idx_dat<-which(colMaxs(X_aux[,idx_catord])!=bu)
idx_dat
length(idx_dat
)
ii<-1
idxs_bad<-which(X[,idx_dat[ii]]>bu[idx_dat[ii]])
idxs_bad
idxs_bad<-which(X_aux[,idx_dat[ii]]>bu[idx_dat[ii]])
idxs_bad
while(length(idxs_bad)>0){
X_aux[idxs_bad,idx_dat[ii]]<-X_aux[idxs_bad,idx_dat[ii]]-1
idxs_bad<-which(X_aux[,idx_dat[ii]]>bu[idx_dat[ii]])
}
X_aux
X_aux<-data_prost$X[1:10,]
N<-dim(X_aux)[1]
D<-dim(X_aux)[2]
V_offset<-colMins(X_aux)
V_offset_mat<-matrix(V_offset,nrow=N,ncol=D,byrow=TRUE)
X_aux<-data$X-V_offset_mat+1
X_aux<-X_aux-V_offset_mat+1
X_aux
idx_catord<-which(data$C=='c' | data$C=='o')
if(length(idx_catord)>0){
data$X[,idx_catord] <-X_aux[,idx_catord]
bu<-apply(X_aux[,idx_catord], 2, function(x)length(unique(x)))
#while(any(colMaxs(X_aux[,idx_catord])!=bu)){
idx_dat<-which(colMaxs(X_aux[,idx_catord])!=bu)
if(length(idx_dat)>0){
for(ii in 1:length(idx_dat)){
idxs_bad<-which(X_aux[,idx_dat[ii]]>bu[idx_dat[ii]])
while(length(idxs_bad)>0){
X_aux[idxs_bad,idx_dat[ii]]<-X_aux[idxs_bad,idx_dat[ii]]-1
idxs_bad<-which(X_aux[,idx_dat[ii]]>bu[idx_dat[ii]])
}
}
}
idx_catord<-which(data_prost$C=='c' | data_prost$C=='o')
if(length(idx_catord)>0){
data$X[,idx_catord] <-X_aux[,idx_catord]
bu<-apply(X_aux[,idx_catord], 2, function(x)length(unique(x)))
#while(any(colMaxs(X_aux[,idx_catord])!=bu)){
idx_dat<-which(colMaxs(X_aux[,idx_catord])!=bu)
if(length(idx_dat)>0){
for(ii in 1:length(idx_dat)){
idxs_bad<-which(X_aux[,idx_dat[ii]]>bu[idx_dat[ii]])
while(length(idxs_bad)>0){
X_aux[idxs_bad,idx_dat[ii]]<-X_aux[idxs_bad,idx_dat[ii]]-1
idxs_bad<-which(X_aux[,idx_dat[ii]]>bu[idx_dat[ii]])
}
}
}
}
bu<-apply(X_aux[,idx_catord], 2, function(x)length(unique(x)))
#while(any(colMaxs(X_aux[,idx_catord])!=bu)){
idx_dat<-which(colMaxs(X_aux[,idx_catord])!=bu)
if(length(idx_dat)>0){
for(ii in 1:length(idx_dat)){
idxs_bad<-which(X_aux[,idx_dat[ii]]>bu[idx_dat[ii]])
while(length(idxs_bad)>0){
X_aux[idxs_bad,idx_dat[ii]]<-X_aux[idxs_bad,idx_dat[ii]]-1
idxs_bad<-which(X_aux[,idx_dat[ii]]>bu[idx_dat[ii]])
}
}
}
X_aux
rm(list=ls())
graphics.off()
setwd("~/Documents/Working_papers/FAP_Rpackage/GLFM/src/GLFMR")
require(R.matlab)
require(ggplot2)
source("GLFM_infer.R")
source("GLFM_computeMAP.R")
source("GLFM_computePDF.R")
source("GLFM_plotPatterns.R")
source("remove_dims.R")
source("get_feature_patterns_sorted.R")
source("computeLeg.R")
datos_prostate<-readMat('prostate_v3.mat')
source("init_default_params.R")
Xauxi <- as.matrix(unlist(datos_prostate$data[2,1,1]),ncol=16,nrow= 502, byrow=TRUE)
Xfull<-aux<-matrix(Xauxi,nrow=502,ncol=16)
C<-unlist(datos_prostate$data[3,1,1],use.names = FALSE)
Cfull<-strsplit(as.character(C), "")
cat_labels_full <-unlist(datos_prostate$data[4,1,1],use.names = FALSE)
y_labels_full<-unlist(datos_prostate$data[5,1,1],use.names = FALSE)
y_labels_long_full<-unlist(datos_prostate$data[6,1,1],use.names = FALSE)
idx_toKeep <- c(1, 2, 4,13, 15)
X<-Xfull[,idx_toKeep]
C<-Cfull[[1]][idx_toKeep]
cat_labels<-cat_labels_full[idx_toKeep]
y_labels<-y_labels_full[idx_toKeep]
y_labels_long<-y_labels_long_full[idx_toKeep]
#params
param_names<-c("missing","s2u","s2B","alpha","Niter","maxK","bias")
missing<--1
s2u<-0.005
s2B<-1
alpha<-1
Niter<-100
maxK<-10
bias<-1
params<-list(missing,s2u,s2B,alpha,Niter,maxK,bias)
names(params)<-param_names
N<-dim(X)[1]
#m0<-matrix(0,N,2)
#Z <- apply(m0, c(1,2), function(x) sample(c(0,1),1,prob=c(0.8,0.2)))
#if(params$bias == 1 && length(params$bias)>0){
#  Z <-cbind(rep(1,N),Z)
#}
# Inference
Z<-c()
data_prost<-list("X"=X,"C"=C)
output <- GLFM_infer(data_prost, list(Z,params))
output$hidden$theta
output$hidden$R
output$hidden$R[2]-1
source("GLFM_computePDF.R")
Kest <-dim(output$hidden$B[[1]])[1]
Zp <- diag(Kest)
Zp[,1] <- 1 # bias active
Zp <- Zp[1:(min(5,Kest)),]
leges <- computeLeg(Zp,c())
colours<-c('red','blue','green','pink','yellow')
GLFM_plotPatterns(data_prost,output$hidden,output$params,Zp, list("leges"=leges,"colours"=colours) )
