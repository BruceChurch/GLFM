idxs_nonnans<-setdiff(1:(length(data_prost$X[,3])),idxs_nans)
mm <- min(data_prost$X[idxs_nonnans,3])
MM <- max(data_prost$X[idxs_nonnans,3])
h <- hist(data_prost$X[idxs_nonnans,3], breaks=(mm-1):(MM+0.5))
h$density <- h$counts/sum(h$counts)
condition<- rep(as.character(leges) , ncol(pdf_val$pdf))
sa <- stack(as.data.frame((pdf_val$pdf)))
sa$ind<-condition
specie<- c(rep("sorgho" , nrow(pdf_val$pdf)) , rep("poacee" , nrow(pdf_val$pdf)) , rep("banana" , nrow(pdf_val$pdf)) , rep("triticum" , nrow(pdf_val$pdf)) )
#sa$x <- rep(seq_len(ncol(pdf_val$pdf)), nrow(pdf_val$pdf))
sa$x<-specie
ggplot(sa, aes(fill=ind, y=values, x=x)) + geom_bar(position = "dodge", stat="identity")
#+    facet_wrap(~ind)
# problem
p2<-ggplot(sa, aes(fill=ind, y=values, x=x)) + geom_bar(position = "dodge", stat="identity")
sa <- stack(as.data.frame((pdf_val$pdf)))
sa$ind<-condition
specie<- c(rep("sorgho" , nrow(pdf_val$pdf)) , rep("poacee" , nrow(pdf_val$pdf)) , rep("banana" , nrow(pdf_val$pdf)) , rep("triticum" , nrow(pdf_val$pdf)) )
#sa$x <- rep(seq_len(ncol(pdf_val$pdf)), nrow(pdf_val$pdf))
sa$x<-specie
p2<-ggplot(sa, aes(fill=ind, y=values, x=x)) + geom_bar(position = "dodge", stat="identity")
pdf_val<-GLFM_computePDF(data_prost,Zp,output$hidden,output$params,3)
Kest <-dim(output$hidden$B[[1]])[1]
Zp <- diag(Kest)
Zp[,1] <- 1 # bias active
Zp <- Zp[1:(min(5,Kest)),]
leges<-computeLeg(Zp,c())
idxs_nans<-which(is.nan(data_prost$X[,3]))
idxs_nonnans<-setdiff(1:(length(data_prost$X[,3])),idxs_nans)
mm <- min(data_prost$X[idxs_nonnans,3])
MM <- max(data_prost$X[idxs_nonnans,3])
h <- hist(data_prost$X[idxs_nonnans,3], breaks=(mm-1):(MM+0.5))
h$density <- h$counts/sum(h$counts)
condition<- rep(as.character(leges) , ncol(pdf_val$pdf))
sa <- stack(as.data.frame((pdf_val$pdf)))
sa$ind<-condition
specie<- c(rep("sorgho" , nrow(pdf_val$pdf)) , rep("poacee" , nrow(pdf_val$pdf)) , rep("banana" , nrow(pdf_val$pdf)) , rep("triticum" , nrow(pdf_val$pdf)) )
#sa$x <- rep(seq_len(ncol(pdf_val$pdf)), nrow(pdf_val$pdf))
sa$x<-specie
p2<-ggplot(sa, aes(fill=ind, y=values, x=x)) + geom_bar(position = "dodge", stat="identity")
#+    facet_wrap(~ind)
p2
p2+ggtitle("Hello")
aa<-"hello"
p2+ggtitle(aa)
plottitles
plottitles[[3]]
p2+ggtitle(plottitles[[3]])
source("GLFM_computePDF.R")
source("GLFM_plotPatterns.R")
Kest <-dim(output$hidden$B[[1]])[1]
Zp <- diag(Kest)
Zp[,1] <- 1 # bias active
Zp <- Zp[1:(min(5,Kest)),]
leges <- computeLeg(Zp,c())
colours<-c('red','blue','green','pink','yellow')
# Falta calcular la probabilidad empirica (es lo que llaman baseline)
GLFM_plotPatterns(data_prost,output$hidden,output$params,Zp, list("leges"=leges,"colours"=colours) )
source("GLFM_infer.R")
source("GLFM_computeMAP.R")
source("GLFM_computePDF.R")
source("GLFM_plotPatterns.R")
source("remove_dims.R")
source("get_feature_patterns_sorted.R")
source("computeLeg.R")
datos_prostate<-readMat('prostate_v3.mat')
graphics.off()
Kest <-dim(output$hidden$B[[1]])[1]
Zp <- diag(Kest)
Zp[,1] <- 1 # bias active
Zp <- Zp[1:(min(5,Kest)),]
leges <- computeLeg(Zp,c())
colours<-c('red','blue','green','pink','yellow')
# Falta calcular la probabilidad empirica (es lo que llaman baseline)
GLFM_plotPatterns(data_prost,output$hidden,output$params,Zp, list("leges"=leges,"colours"=colours) )
graphics.off()
source("GLFM_computePDF.R")
source("GLFM_plotPatterns.R")
Kest <-dim(output$hidden$B[[1]])[1]
Zp <- diag(Kest)
Zp[,1] <- 1 # bias active
Zp <- Zp[1:(min(5,Kest)),]
leges <- computeLeg(Zp,c())
colours<-c('red','blue','green','pink','yellow')
# Falta calcular la probabilidad empirica (es lo que llaman baseline)
GLFM_plotPatterns(data_prost,output$hidden,output$params,Zp, list("leges"=leges,"colours"=colours) )
graphics.off()
setwd("~/Documents/Working_papers/FAP_Rpackage/GLFM/src/GLFMR")
require(R.matlab)
require(ggplot2)
source("GLFM_infer.R")
source("GLFM_computeMAP.R")
source("GLFM_computePDF.R")
source("GLFM_plotPatterns.R")
source("remove_dims.R")
source("get_feature_patterns_sorted.R")
source("computeLeg.R")
datos_prostate<-readMat('prostate_v3.mat')
source("init_default_params.R")
Kest <-dim(output$hidden$B[[1]])[1]
Zp <- diag(Kest)
Zp[,1] <- 1 # bias active
Zp <- Zp[1:(min(5,Kest)),]
leges <- computeLeg(Zp,c())
colours<-c('red','blue','green','pink','yellow')
# Falta calcular la probabilidad empirica (es lo que llaman baseline)
GLFM_plotPatterns(data_prost,output$hidden,output$params,Zp, list("leges"=leges,"colours"=colours) )
C
graphics.off()
rm(list=ls())
graphics.off()
setwd("~/Documents/Working_papers/FAP_Rpackage/GLFM/src/GLFMR")
require(R.matlab)
require(ggplot2)
source("GLFM_infer.R")
source("GLFM_computeMAP.R")
source("GLFM_computePDF.R")
source("GLFM_plotPatterns.R")
source("remove_dims.R")
source("get_feature_patterns_sorted.R")
source("computeLeg.R")
datos_prostate<-readMat('prostate_v3.mat')
source("init_default_params.R")
Xauxi <- as.matrix(unlist(datos_prostate$data[2,1,1]),ncol=16,nrow= 502, byrow=TRUE)
Xfull<-aux<-matrix(Xauxi,nrow=502,ncol=16)
C<-unlist(datos_prostate$data[3,1,1],use.names = FALSE)
Cfull<-strsplit(as.character(C), "")
cat_labels_full <-unlist(datos_prostate$data[4,1,1],use.names = FALSE)
y_labels_full<-unlist(datos_prostate$data[5,1,1],use.names = FALSE)
y_labels_long_full<-unlist(datos_prostate$data[6,1,1],use.names = FALSE)
idx_toKeep <- c(1, 2, 4,13, 15)
X<-Xfull[,idx_toKeep]
C<-Cfull[[1]][idx_toKeep]
aux1<-rep(paste("stage",cat_labels_full[1:2]),5)
cat_labels1<-aux1[order(aux1)]
aux2<-rep(paste(cat_labels_full[3:5], "mg"),5)
ord_labels2<-aux2[order(aux2)]
aux3<-rep(cat_labels_full[6:9],5)
cat_labels3<-aux3[order(aux3)]
y_labels<-y_labels_full[idx_toKeep]
y_labels_long<-y_labels_long_full[idx_toKeep]
N<-dim(X)[1]
D<-dim(X)[2]
plotlabels<-list(cat_labels1,ord_labels2,cat_labels3)
plottitles<-list("Type of cancer","Prognosis status", "Drug level", "Size of primary tumor (cm^2)","Serum prostatic acid phosphatase")
# pre-transform a subset of variables
#params
param_names<-c("missing","s2u","s2B","alpha","Niter","maxK","bias","transf_dummie","plotlabels","plottitles")
missing<--1
s2u<-0.005
s2B<-1
alpha<-1
Niter<-1000
maxK<-10
bias<-1
transf_dummie <-TRUE
if(transf_dummie){
idx_transform <- D # we transform the last dimension
# transformation to apply to raw data
t_1<-function(x){log(x+1)}
# inverse transform to recover raw data
t_inv<-function(y){exp(y)-1}
# derivative of transform
dt_1<-function(x){1/as.vector(x+1)}
# change type of data due to transformation
ext_datatype <-'p'
param_names<-c(param_names,'t_1','dt_1','t_inv','ext_datatype','idx_transform')
params<-list(missing,s2u,s2B,alpha,Niter,maxK,bias,transf_dummie,plotlabels,plottitles,t_1,dt_1,t_inv,ext_datatype,idx_transform)
} else{
params<-list(missing,s2u,s2B,alpha,Niter,maxK,bias,transf_dummie,plotlabels,plottitles)
}
names(params)<-param_names
# Inference
Z<-c()
data_prost<-list("X"=X,"C"=C)
output <- GLFM_infer(data_prost, list(Z,params))
writeMat("output.mat",Z=output$hidden$Z,B1=output$hidden$B[[1]],B2=output$hidden$B[[2]],B3=output$hidden$B[[3]],B4=output$hidden$B[[4]],B5=output$hidden$B[[5]], theta=output$hidden$theta,mu = output$hidden$mu,w = output$hidden$w,s2y = output$hidden$s2y,R = output$hidden$R )
#Predict MAP estimate for the whole matrix X
X_map <- GLFM_computeMAP(data_prost$C, output$hidden$Z, output$hidden, output$params,c())
# Remove latent dimensions
th <- 0.03 #threshold to filter out latent features that are not significant
feat_toRemove <- which(sum(output$hidden$Z) < N*th) # filter features with insufficient number of obs. assigned
if(length(feat_toRemove)>0){
hidden <- remove_dims(output$hidden, feat_toRemove)
}
sorted_patterns<- get_feature_patterns_sorted(output$hidden$Z,c())
Kest <-dim(output$hidden$B[[1]])[1]
Zp <- diag(Kest)
Zp[,1] <- 1 # bias active
Zp <- Zp[1:(min(5,Kest)),]
leges <- computeLeg(Zp,c())
colours<-c('red','blue','green','pink','yellow')
# Falta calcular la probabilidad empirica (es lo que llaman baseline)
GLFM_plotPatterns(data_prost,output$hidden,output$params,Zp, list("leges"=leges,"colours"=colours) )
graphics.off()
pdf_val<-GLFM_computePDF(data_prost,Zp,output$hidden,output$params,5)
plotcols<-c('red','blue','green','pink','yellow')
plot(pdf_val$xd,pdf_val$pdf[1,], xlab = expression(x_d),ylab="",col=plotcols[1],type="l")
par(new=T)
for(d in 2:5){
plot(pdf_val$xd,pdf_val$pdf[d,], xlab = expression(x_d),ylab="",col=plotcols[d],type="l",axes=F)
par(new=T)
#print("Press return to continue")
}
pdf_val<-GLFM_computePDF(data_prost,Zp,output$hidden,output$params,5)
plotcols<-c('red','blue','green','pink','yellow')
plot(pdf_val$xd,pdf_val$pdf[1,], xlab = expression(paste("x","d",sep="_")),ylab="",col=plotcols[1],type="l")
par(new=T)
for(d in 2:5){
plot(pdf_val$xd,pdf_val$pdf[d,], xlab = expression(paste("x","d",sep="_")),ylab="",col=plotcols[d],type="l",axes=F)
par(new=T)
#print("Press return to continue")
}
pdf_val<-GLFM_computePDF(data_prost,Zp,output$hidden,output$params,5)
plotcols<-c('red','blue','green','pink','yellow')
plot(pdf_val$xd,pdf_val$pdf[1,], xlab = expression("x"[d]),ylab="",col=plotcols[1],type="l")
par(new=T)
for(d in 2:5){
plot(pdf_val$xd,pdf_val$pdf[d,], xlab = expression("x"[d]),ylab="",col=plotcols[d],type="l",axes=F)
par(new=T)
#print("Press return to continue")
}
graphics.off()
pdf_val<-GLFM_computePDF(data_prost,Zp,output$hidden,output$params,5)
plotcols<-c('red','blue','green','pink','yellow')
plot(pdf_val$xd,pdf_val$pdf[1,], xlab = expression("x"[d]),ylab="",col=plotcols[1],type="l")
par(new=T)
for(d in 2:5){
plot(pdf_val$xd,pdf_val$pdf[d,], xlab = expression("x"[d]),ylab="",col=plotcols[d],type="l",axes=F)
par(new=T)
#print("Press return to continue")
}
pdf_val<-GLFM_computePDF(data_prost,Zp,output$hidden,output$params,5)
plotcols<-c('red','blue','green','pink','yellow')
plot(pdf_val$xd,pdf_val$pdf[1,], xlab = expression("x"[d]),ylab="",col=plotcols[1],type="l")
par(new=T)
for(d in 2:5){
plot(pdf_val$xd,pdf_val$pdf[d,], xlab = expression("x"[d]),ylab="",col=plotcols[d],type="l",axes=F)
par(new=T)
#print("Press return to continue")
}
source("GLFM_infer.R")
source("GLFM_computeMAP.R")
source("GLFM_computePDF.R")
source("GLFM_plotPatterns.R")
source("remove_dims.R")
source("get_feature_patterns_sorted.R")
source("computeLeg.R")
datos_prostate<-readMat('prostate_v3.mat')
Kest <-dim(output$hidden$B[[1]])[1]
Zp <- diag(Kest)
Zp[,1] <- 1 # bias active
Zp <- Zp[1:(min(5,Kest)),]
leges <- computeLeg(Zp,c())
colours<-c('red','blue','green','pink','yellow')
# Falta calcular la probabilidad empirica (es lo que llaman baseline)
GLFM_plotPatterns(data_prost,output$hidden,output$params,Zp, list("leges"=leges,"colours"=colours) )
source("GLFM_infer.R")
source("GLFM_computeMAP.R")
source("GLFM_computePDF.R")
source("GLFM_plotPatterns.R")
source("remove_dims.R")
source("get_feature_patterns_sorted.R")
source("computeLeg.R")
datos_prostate<-readMat('prostate_v3.mat')
source("init_default_params.R")
Kest <-dim(output$hidden$B[[1]])[1]
Zp <- diag(Kest)
Zp[,1] <- 1 # bias active
Zp <- Zp[1:(min(5,Kest)),]
leges <- computeLeg(Zp,c())
colours<-c('red','blue','green','pink','yellow')
# Falta calcular la probabilidad empirica (es lo que llaman baseline)
GLFM_plotPatterns(data_prost,output$hidden,output$params,Zp, list("leges"=leges,"colours"=colours) )
graphics.off()
idxs_nans<-which(is.nan(data_prost$X[,3]))
idxs_nonnans<-setdiff(1:(length(data_prost$X[,3])),idxs_nans)
mm <- min(data_prost$X[idxs_nonnans,3])
MM <- max(data_prost$X[idxs_nonnans,3])
h <- hist(data_prost$X[idxs_nonnans,3], breaks=(mm-1):(MM+0.5))
names(h)
h$counts
h$counts/sum(counts)
h$counts/sum(h$counts)
rep(h$counts/sum(h$counts))
rep(h$counts/sum(h$counts),5)
sa
pdf_val<-GLFM_computePDF(data_prost,Zp,output$hidden,output$params,3)
condition<- rep(as.character(leges) , ncol(pdf_val$pdf))
sa <- stack(as.data.frame((pdf_val$pdf)))
sa$ind<-condition
sa
sa$values[1]
sa$values[1]<-0.1
sa
pdf_val$pdf
cat(pdf_val$pdf,0.1)
rbind(pdf_val$pdf,rep(0.1,4))
rbind(pdf_val$pdf,h$counts/sum(h$counts)
)
rbind(h$counts/sum(h$counts),pdf_val$pdf)
leges<-computeLeg(rbind(rep(0,4),Zp),c())
dxs_nans<-which(is.nan(data_prost$X[,3]))
idxs_nonnans<-setdiff(1:(length(data_prost$X[,3])),idxs_nans)
mm <- min(data_prost$X[idxs_nonnans,3])
MM <- max(data_prost$X[idxs_nonnans,3])
h <- hist(data_prost$X[idxs_nonnans,3], breaks=(mm-1):(MM+0.5))
h$density <- h$counts/sum(h$counts)
condition<- rep(as.character(leges) , ncol(pdf_val$pdf))
auxpdf<-rbind(h$counts/sum(h$counts),pdf_val$pdf)
sa <- stack(as.data.frame((auxpdf)))
sa
sa$ind<-condition
sa
p2<-ggplot(sa, aes(fill=ind, y=values, x=x)) + geom_bar(position = "dodge", stat="identity")
p2
specie<- c(rep("base", nrow(pdf_val$pdf)),rep("sorgho" , nrow(pdf_val$pdf)) , rep("poacee" , nrow(pdf_val$pdf)) , rep("banana" , nrow(pdf_val$pdf)) , rep("triticum" , nrow(pdf_val$pdf)) )
#sa$x <- rep(seq_len(ncol(pdf_val$pdf)), nrow(pdf_val$pdf))
sa$x<-specie
sa <- stack(as.data.frame((auxpdf)))
#sa <- stack(as.data.frame((pdf_val$pdf)))
sa$ind<-condition
specie<- c(rep("base", nrow(auxpdf)),rep("sorgho" , nrow(auxpdf)) , rep("poacee" , nrow(auxpdf)) , rep("banana" , nrow(auxpdf)) , rep("triticum" , nrow(auxpdf)) )
#sa$x <- rep(seq_len(ncol(pdf_val$pdf)), nrow(pdf_val$pdf))
sa$x<-specie
auxpdf<-rbind(h$counts/sum(h$counts),pdf_val$pdf)
auxpdf
nrows(auxpdf)
nrow(auxpdf)
specie<- c(rep("base", nrow(auxpdf)),rep("sorgho" , nrow(auxpdf)) , rep("poacee" , nrow(auxpdf)) , rep("banana" , nrow(auxpdf)) , rep("triticum" , nrow(auxpdf)) )
specie
sa <- stack(as.data.frame((auxpdf)))
#sa <- stack(as.data.frame((pdf_val$pdf)))
sa$ind<-condition
sa
length(specie)
length(auxpdf)
length(sa)
dim(sa)
specie<- c(rep("sorgho" , nrow(auxpdf)) , rep("poacee" , nrow(auxpdf)) , rep("banana" , nrow(auxpdf)) , rep("triticum" , nrow(auxpdf)) )
length(specie)
sa$x<-specie
sa
p2<-ggplot(sa, aes(fill=ind, y=values, x=x)) + geom_bar(position = "dodge", stat="identity")
p2
leges <- computeLeg(rbind(rep(0, nrow(Zp)),Zp),c())
Zp
leges <- computeLeg(rbind(rep(0, ncol(Zp)),Zp),c())
auxpdf<-rbind(h$counts/sum(h$counts),pdf_val$pdf)
condition <- rep(as.character(leges) , ncol(auxpdf))
sa <- stack(as.data.frame((auxpdf)))
sa$Patterns <-condition
sa
p1<-ggplot(sa, aes(fill=Patterns, y=values, x=x)) + geom_bar(position = "dodge", stat="identity")
source("GLFM_computePDF.R")
source("GLFM_plotPatterns.R")
Kest <-dim(output$hidden$B[[1]])[1]
Zp <- diag(Kest)
Zp[,1] <- 1 # bias active
Zp <- Zp[1:(min(5,Kest)),]
leges <- computeLeg(rbind(rep(0, ncol(Zp)),Zp),c())
colours<-c('red','blue','green','pink','yellow')
# Falta calcular la probabilidad empirica (es lo que llaman baseline)
GLFM_plotPatterns(data_prost,output$hidden,output$params,Zp, list("leges"=leges,"colours"=colours) )
rm(list=ls())
graphics.off()
setwd("~/Documents/Working_papers/FAP_Rpackage/GLFM/src/GLFMR")
require(R.matlab)
require(ggplot2)
source("GLFM_infer.R")
source("GLFM_computeMAP.R")
source("GLFM_computePDF.R")
source("GLFM_plotPatterns.R")
source("remove_dims.R")
source("get_feature_patterns_sorted.R")
source("computeLeg.R")
datos_prostate<-readMat('prostate_v3.mat')
source("init_default_params.R")
Xauxi <- as.matrix(unlist(datos_prostate$data[2,1,1]),ncol=16,nrow= 502, byrow=TRUE)
Xfull<-aux<-matrix(Xauxi,nrow=502,ncol=16)
C<-unlist(datos_prostate$data[3,1,1],use.names = FALSE)
Cfull<-strsplit(as.character(C), "")
cat_labels_full <-unlist(datos_prostate$data[4,1,1],use.names = FALSE)
y_labels_full<-unlist(datos_prostate$data[5,1,1],use.names = FALSE)
y_labels_long_full<-unlist(datos_prostate$data[6,1,1],use.names = FALSE)
idx_toKeep <- c(1, 2, 4,13, 15)
X<-Xfull[,idx_toKeep]
C<-Cfull[[1]][idx_toKeep]
aux1<-rep(paste("stage",cat_labels_full[1:2]),6)
cat_labels1<-aux1[order(aux1)]
aux2<-rep(paste(cat_labels_full[3:5], "mg"),6)
ord_labels2<-aux2[order(aux2)]
aux3<-rep(cat_labels_full[6:9],6)
cat_labels3<-aux3[order(aux3)]
y_labels<-y_labels_full[idx_toKeep]
y_labels_long<-y_labels_long_full[idx_toKeep]
N<-dim(X)[1]
D<-dim(X)[2]
plotlabels<-list(cat_labels1,ord_labels2,cat_labels3)
plottitles<-list("Type of cancer","Prognosis status", "Drug level", "Size of primary tumor (cm^2)","Serum prostatic acid phosphatase")
# pre-transform a subset of variables
#params
param_names<-c("missing","s2u","s2B","alpha","Niter","maxK","bias","transf_dummie","plotlabels","plottitles")
missing<--1
s2u<-0.005
s2B<-1
alpha<-1
Niter<-1000
maxK<-10
bias<-1
transf_dummie <-TRUE
if(transf_dummie){
idx_transform <- D # we transform the last dimension
# transformation to apply to raw data
t_1<-function(x){log(x+1)}
# inverse transform to recover raw data
t_inv<-function(y){exp(y)-1}
# derivative of transform
dt_1<-function(x){1/as.vector(x+1)}
# change type of data due to transformation
ext_datatype <-'p'
param_names<-c(param_names,'t_1','dt_1','t_inv','ext_datatype','idx_transform')
params<-list(missing,s2u,s2B,alpha,Niter,maxK,bias,transf_dummie,plotlabels,plottitles,t_1,dt_1,t_inv,ext_datatype,idx_transform)
} else{
params<-list(missing,s2u,s2B,alpha,Niter,maxK,bias,transf_dummie,plotlabels,plottitles)
}
names(params)<-param_names
# Inference
Z<-c()
data_prost<-list("X"=X,"C"=C)
output <- GLFM_infer(data_prost, list(Z,params))
writeMat("output.mat",Z=output$hidden$Z,B1=output$hidden$B[[1]],B2=output$hidden$B[[2]],B3=output$hidden$B[[3]],B4=output$hidden$B[[4]],B5=output$hidden$B[[5]], theta=output$hidden$theta,mu = output$hidden$mu,w = output$hidden$w,s2y = output$hidden$s2y,R = output$hidden$R )
#Predict MAP estimate for the whole matrix X
X_map <- GLFM_computeMAP(data_prost$C, output$hidden$Z, output$hidden, output$params,c())
# Remove latent dimensions
th <- 0.03 #threshold to filter out latent features that are not significant
feat_toRemove <- which(sum(output$hidden$Z) < N*th) # filter features with insufficient number of obs. assigned
if(length(feat_toRemove)>0){
hidden <- remove_dims(output$hidden, feat_toRemove)
}
sorted_patterns<- get_feature_patterns_sorted(output$hidden$Z,c())
Kest <-dim(output$hidden$B[[1]])[1]
Zp <- diag(Kest)
Zp[,1] <- 1 # bias active
Zp <- Zp[1:(min(5,Kest)),]
leges <- computeLeg(rbind(rep(0, ncol(Zp)),Zp),c())
colours<-c('red','blue','green','pink','yellow')
# Falta calcular la probabilidad empirica (es lo que llaman baseline)
GLFM_plotPatterns(data_prost,output$hidden,output$params,Zp, list("leges"=leges,"colours"=colours) )
source("GLFM_infer.R")
source("GLFM_computeMAP.R")
source("GLFM_computePDF.R")
source("GLFM_plotPatterns.R")
sorted_patterns<- get_feature_patterns_sorted(output$hidden$Z,c())
Kest <-dim(output$hidden$B[[1]])[1]
Zp <- diag(Kest)
Zp[,1] <- 1 # bias active
Zp <- Zp[1:(min(5,Kest)),]
leges <- computeLeg(rbind(rep(0, ncol(Zp)),Zp),c())
colours<-c('red','blue','green','pink','yellow')
# Falta calcular la probabilidad empirica (es lo que llaman baseline)
GLFM_plotPatterns(data_prost,output$hidden,output$params,Zp, list("leges"=leges,"colours"=colours) )
source("GLFM_infer.R")
source("GLFM_computeMAP.R")
source("GLFM_computePDF.R")
source("GLFM_plotPatterns.R")
graphics.off()
source("GLFM_infer.R")
source("GLFM_computeMAP.R")
source("GLFM_computePDF.R")
source("GLFM_plotPatterns.R")
sorted_patterns<- get_feature_patterns_sorted(output$hidden$Z,c())
Kest <-dim(output$hidden$B[[1]])[1]
Zp <- diag(Kest)
Zp[,1] <- 1 # bias active
Zp <- Zp[1:(min(5,Kest)),]
leges <- computeLeg(rbind(rep(0, ncol(Zp)),Zp),c())
colours<-c('red','blue','green','pink','yellow')
# Falta calcular la probabilidad empirica (es lo que llaman baseline)
GLFM_plotPatterns(data_prost,output$hidden,output$params,Zp, list("leges"=leges,"colours"=colours) )
source("GLFM_infer.R")
source("GLFM_computeMAP.R")
source("GLFM_computePDF.R")
source("GLFM_plotPatterns.R")
sorted_patterns<- get_feature_patterns_sorted(output$hidden$Z,c())
Kest <-dim(output$hidden$B[[1]])[1]
Zp <- diag(Kest)
Zp[,1] <- 1 # bias active
Zp <- Zp[1:(min(5,Kest)),]
leges <- computeLeg(rbind(rep(0, ncol(Zp)),Zp),c())
colours<-c('red','blue','green','pink','yellow')
# Falta calcular la probabilidad empirica (es lo que llaman baseline)
GLFM_plotPatterns(data_prost,output$hidden,output$params,Zp, list("leges"=leges,"colours"=colours) )
sorted_patterns<- get_feature_patterns_sorted(output$hidden$Z,c())
Kest <-dim(output$hidden$B[[1]])[1]
Zp <- diag(Kest)
Zp[,1] <- 1 # bias active
Zp <- Zp[1:(min(5,Kest)),]
leges <- computeLeg(rbind(rep(0, ncol(Zp)),Zp),c())
colours<-c('red','blue','green','pink','yellow')
# Falta calcular la probabilidad empirica (es lo que llaman baseline)
GLFM_plotPatterns(data_prost,output$hidden,output$params,Zp, list("leges"=leges,"colours"=colours) )
sorted_patterns<- get_feature_patterns_sorted(output$hidden$Z,c())
Kest <-dim(output$hidden$B[[1]])[1]
Zp <- diag(Kest)
Zp[,1] <- 1 # bias active
Zp <- Zp[1:(min(5,Kest)),]
leges <- computeLeg(rbind(rep(0, ncol(Zp)),Zp),c())
colours<-c('red','blue','green','pink','yellow')
# Falta calcular la probabilidad empirica (es lo que llaman baseline)
GLFM_plotPatterns(data_prost,output$hidden,output$params,Zp, list("leges"=leges,"colours"=colours) )
graphics.off()
