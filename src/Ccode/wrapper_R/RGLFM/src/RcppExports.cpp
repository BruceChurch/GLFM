// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// f
#include "GeneralFunctions.h"  #include <math.h> #include <stdio.h> #include <iostream> #include <time.h> #include <gsl/gsl_sf_exp.h> #include <gsl/gsl_sf_log.h> #include <gsl/gsl_blas.h>  #include <gsl/gsl_matrix.h> #include <gsl/gsl_vector.h> #include <gsl/gsl_linalg.h> #include <gsl/gsl_math.h> #include "gsl/gsl_cdf.h" #include "gsl/gsl_randist.h"  // Transformations /*double f(double x, double w);
RcppExport SEXP RGLFM_f(SEXP xSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(f(x, w));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP RGLFM_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// [[Rcpp::depends
// [[Rcpp::depends(RcppGSL)]]  //#include "GeneralFunctions.cpp" #include "InferenceFunctions.cpp" #include "InferenceFunctions.h" #include "GeneralFunctions.h" // #include <InferenceFunctions.h>  RcppExport SEXP initialize_wrapper(SEXP N_, SEXP D_, SEXP K_, SEXP maxK_, SEXP missing_, const RcppGSL::Matrix& X, const RcppGSL::Matrix& Z, SEXP C_, const RcppGSL::Matrix& B, const RcppGSL::Vector& theta, SEXP R_, SEXP f_, SEXP mu_, SEXP w_, SEXP s2y_, SEXP bias_, SEXP alpha_, SEXP s2B_, SEXP s2u_, SEXP Nsim_);
RcppExport SEXP RGLFM_[[Rcpp::depends(SEXP N_SEXP, SEXP D_SEXP, SEXP K_SEXP, SEXP maxK_SEXP, SEXP missing_SEXP, SEXP XSEXP, SEXP ZSEXP, SEXP C_SEXP, SEXP BSEXP, SEXP thetaSEXP, SEXP R_SEXP, SEXP f_SEXP, SEXP mu_SEXP, SEXP w_SEXP, SEXP s2y_SEXP, SEXP bias_SEXP, SEXP alpha_SEXP, SEXP s2B_SEXP, SEXP s2u_SEXP, SEXP Nsim_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RcppGSL)]]  //#include "GeneralFunctions.cpp" #include "InferenceFunctions.cpp" #include "InferenceFunctions.h" #include "GeneralFunctions.h" // #include <InferenceFunctions.h>  RcppExport SEXP initialize_wrapper(SEXP >::type N_(N_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type D_(D_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type K_(K_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type maxK_(maxK_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type missing_(missing_SEXP);
    Rcpp::traits::input_parameter< const RcppGSL::Matrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const RcppGSL::Matrix& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< SEXP >::type C_(C_SEXP);
    Rcpp::traits::input_parameter< const RcppGSL::Matrix& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const RcppGSL::Vector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type R_(R_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type f_(f_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type mu_(mu_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type w_(w_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type s2y_(s2y_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type bias_(bias_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type alpha_(alpha_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type s2B_(s2B_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type s2u_(s2u_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type Nsim_(Nsim_SEXP);
    rcpp_result_gen = Rcpp::wrap([[Rcpp::depends(N_, D_, K_, maxK_, missing_, X, Z, C_, B, theta, R_, f_, mu_, w_, s2y_, bias_, alpha_, s2B_, s2u_, Nsim_));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP RGLFM_initialize_wrapper(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"RGLFM_f", (DL_FUNC) &RGLFM_f, 2},
    {"RGLFM_rcpp_hello_world", (DL_FUNC) &RGLFM_rcpp_hello_world, 0},
    {"RGLFM_[[Rcpp::depends", (DL_FUNC) &RGLFM_[[Rcpp::depends, 20},
    {"RGLFM_initialize_wrapper", (DL_FUNC) &RGLFM_initialize_wrapper, 20},
    {NULL, NULL, 0}
};

RcppExport void R_init_RGLFM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
